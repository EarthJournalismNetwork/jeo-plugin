{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JEO Plugin The JEO plugin acts as a geojournalism platform that allows news organizations, bloggers and NGOs to publish news stories as layers of information on digital maps. With JEO, creating the interaction between data layers and contextual information is intuitive and interactive. You can post geotagged stories and create richly designed pages for each one of the featured stories. At the same time, by simply imputing the ids of layers hosted on MapBox, you can manage sophisticated maps without losing performance, add legends directly with HTML and set the map parameters. All direct at the WordPress dashboard. Features MapBox maps ReactMapBoxGL library Custom tile layers Layer filtering options, allowing you to mix tile layer. Geocoding WordPress posts using OpenStreetMaps (Nominatim), suporting the post type Post . Customizable marker icons that can be associated to categories, custom taxonomies or posts directly. Map markers query integrated to posts query. Support WPML and Polylang multilanguages plugins User tutorials Getting started Concepts Installing and configuring the plugin Layers Creating layers Maps Creating maps Discovery Using discovery Posts Geolocating posts Using a map shortcode Using a map block Using an one-time map block Using a map embed Developer documentation Tutorials Adding new Layer Types Geographical Information of a post Writing a Geocoder Differences between the old and the present JEO Migration","title":"Home"},{"location":"#jeo-plugin","text":"The JEO plugin acts as a geojournalism platform that allows news organizations, bloggers and NGOs to publish news stories as layers of information on digital maps. With JEO, creating the interaction between data layers and contextual information is intuitive and interactive. You can post geotagged stories and create richly designed pages for each one of the featured stories. At the same time, by simply imputing the ids of layers hosted on MapBox, you can manage sophisticated maps without losing performance, add legends directly with HTML and set the map parameters. All direct at the WordPress dashboard.","title":"JEO Plugin"},{"location":"#features","text":"MapBox maps ReactMapBoxGL library Custom tile layers Layer filtering options, allowing you to mix tile layer. Geocoding WordPress posts using OpenStreetMaps (Nominatim), suporting the post type Post . Customizable marker icons that can be associated to categories, custom taxonomies or posts directly. Map markers query integrated to posts query. Support WPML and Polylang multilanguages plugins","title":"Features"},{"location":"#user-tutorials","text":"","title":"User tutorials"},{"location":"#getting-started","text":"Concepts Installing and configuring the plugin","title":"Getting started"},{"location":"#layers","text":"Creating layers","title":"Layers"},{"location":"#maps","text":"Creating maps","title":"Maps"},{"location":"#discovery","text":"Using discovery","title":"Discovery"},{"location":"#posts","text":"Geolocating posts Using a map shortcode Using a map block Using an one-time map block Using a map embed","title":"Posts"},{"location":"#developer-documentation","text":"","title":"Developer documentation"},{"location":"#tutorials","text":"Adding new Layer Types Geographical Information of a post Writing a Geocoder","title":"Tutorials"},{"location":"#differences-between-the-old-and-the-present-jeo","text":"Migration","title":"Differences between the old and the present JEO"},{"location":"concepts/","text":"Concepts Layer A layer is the basic building block for map interactions. Each layer can have its legends, attributions, etc. JEO supports four layer types out-of-the-box: Mapbox styles Mapbox tilesets Mapbox vector tiles (MVTs) TileLayers Map A map is composed of one or more layers and can be associated with related geolocated posts, that'll be rendered as markers on the map. A map post is used for reusable map interactions, that can be embedded in any post as a shortcode or Gutenberg block . One-time Map Instead of creating a reusable map any time you want to add a map interaction, you can create and configure an inline single-use map via the One-Time Map block for Gutenberg.","title":"Concepts"},{"location":"concepts/#concepts","text":"","title":"Concepts"},{"location":"concepts/#layer","text":"A layer is the basic building block for map interactions. Each layer can have its legends, attributions, etc. JEO supports four layer types out-of-the-box: Mapbox styles Mapbox tilesets Mapbox vector tiles (MVTs) TileLayers","title":"Layer"},{"location":"concepts/#map","text":"A map is composed of one or more layers and can be associated with related geolocated posts, that'll be rendered as markers on the map. A map post is used for reusable map interactions, that can be embedded in any post as a shortcode or Gutenberg block .","title":"Map"},{"location":"concepts/#one-time-map","text":"Instead of creating a reusable map any time you want to add a map interaction, you can create and configure an inline single-use map via the One-Time Map block for Gutenberg.","title":"One-time Map"},{"location":"discovery/","text":"Discovery Discovery page is an interactive map which the user can add layers, see stories based os published posts and share it's own customized map with others. Discovery page has a left sidebar with two tabs: STORIES and MAP LAYERS . You can hide this sidebar by clicking on the two left arrow icon, at the right of the sidebar. Stories Stories are the geolocated posts that are shown on the map. Clicking on SHOW FILTERS allows you to filter these stories by date and tags. Below these filters, a list with the result will be shown. Each result is also a link to the story itself. Also, hovering the mouse on a map marker will highlight the related story int the left sidebar. In the same way, hovering the mouse on View in map text will highlight the map marker realted to it. Map Layers In Map Layers tab you can search for maps and apply its layers to your interactive map. You can filter maps by name and select different layers from different maps. After selecting at least one layer from a map, you can click on Clear to remove all the select layers from this map from the discovery map. It is also possible to add all layers from a map with one single click when selecting Apply next to a map result. At the top of the sidebar, you will be able to see all the selected layers, allowing you to remove some of them. After reviewing these layers, you need to click on Apply changes so that they'll be shown on discovery map. Sharing At the right-top side of the map, there's a share button where you can share the content on Twitter , Facebook , E-mail or even generate a custom link for your map. Also, clicking on embed makes a popup appears with a HTML code to embed your custom map into another website.","title":"Discovery"},{"location":"discovery/#discovery","text":"Discovery page is an interactive map which the user can add layers, see stories based os published posts and share it's own customized map with others. Discovery page has a left sidebar with two tabs: STORIES and MAP LAYERS . You can hide this sidebar by clicking on the two left arrow icon, at the right of the sidebar.","title":"Discovery"},{"location":"discovery/#stories","text":"Stories are the geolocated posts that are shown on the map. Clicking on SHOW FILTERS allows you to filter these stories by date and tags. Below these filters, a list with the result will be shown. Each result is also a link to the story itself. Also, hovering the mouse on a map marker will highlight the related story int the left sidebar. In the same way, hovering the mouse on View in map text will highlight the map marker realted to it.","title":"Stories"},{"location":"discovery/#map-layers","text":"In Map Layers tab you can search for maps and apply its layers to your interactive map. You can filter maps by name and select different layers from different maps. After selecting at least one layer from a map, you can click on Clear to remove all the select layers from this map from the discovery map. It is also possible to add all layers from a map with one single click when selecting Apply next to a map result. At the top of the sidebar, you will be able to see all the selected layers, allowing you to remove some of them. After reviewing these layers, you need to click on Apply changes so that they'll be shown on discovery map.","title":"Map Layers"},{"location":"discovery/#sharing","text":"At the right-top side of the map, there's a share button where you can share the content on Twitter , Facebook , E-mail or even generate a custom link for your map. Also, clicking on embed makes a popup appears with a HTML code to embed your custom map into another website.","title":"Sharing"},{"location":"geolocating-posts/","text":"Geolocating posts When editing a post, JEO will add an extra panel to the sidebar: Geolocation . Clicking on Geolocate this post , a popup will then be displayed. New points can be added to the post by clicking on Add new point button. You can search for a specific location in the search bar. It's also possible to choose the relevance of each point, which is useful when you have more than one point. Visualizing a map with geolocated posts Map with geolocated posts contain markers on the localization of each post. Clicking on them will open a popup with its title and publication date. Clicking on the title will take you to the post itself.","title":"Geolocating posts"},{"location":"geolocating-posts/#geolocating-posts","text":"When editing a post, JEO will add an extra panel to the sidebar: Geolocation . Clicking on Geolocate this post , a popup will then be displayed. New points can be added to the post by clicking on Add new point button. You can search for a specific location in the search bar. It's also possible to choose the relevance of each point, which is useful when you have more than one point.","title":"Geolocating posts"},{"location":"geolocating-posts/#visualizing-a-map-with-geolocated-posts","text":"Map with geolocated posts contain markers on the localization of each post. Clicking on them will open a popup with its title and publication date. Clicking on the title will take you to the post itself.","title":"Visualizing a map with geolocated posts"},{"location":"getting-started/","text":"Getting started Installing After activating the plugin, a new item will appear on the WordPress dashboard: a menu containing the Maps , Layers and Story Maps post types, and the JEO settings menus. Configuring the plugin Under JEO main menu, at Jeo Settings page, you can configure: the default latitude, longitude, and zoom for your maps; the Mapbox API settings and Carto API settings that'll be used by the plugin; the update interval related to carto layers data (if carto layers are being used); the geocoder that'll be used by the plugin -- currently only Nominatim is available.7 the style of some functionalities of the plugin, such as fonts ans colors.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installing","text":"After activating the plugin, a new item will appear on the WordPress dashboard: a menu containing the Maps , Layers and Story Maps post types, and the JEO settings menus.","title":"Installing"},{"location":"getting-started/#configuring-the-plugin","text":"Under JEO main menu, at Jeo Settings page, you can configure: the default latitude, longitude, and zoom for your maps; the Mapbox API settings and Carto API settings that'll be used by the plugin; the update interval related to carto layers data (if carto layers are being used); the geocoder that'll be used by the plugin -- currently only Nominatim is available.7 the style of some functionalities of the plugin, such as fonts ans colors.","title":"Configuring the plugin"},{"location":"layer-post/","text":"Creating a layer One of the custom post types that JEO plugin provides is Layer . Is in the layer where you will be able to add legend and color to your map. A map may contain one or more layers. Entering the Layer post editor, you'll see a preview of the current layer (or a default layer if the current layer haven't been edited yet) and four sidebar panels: Settings , Carto Integration , Attributions and Legend . Layer settings On the Layer settings panel, you can change the layer type. JEO supports four layer types out-of-the-box: Mapbox styles Mapbox tilesets Mapbox vector tiles (MVTs) TileLayers You can also inform an address, following the standard username/id , to compose your map style. If an access token is needed for this layer, you can put it into the Acess token input. There's also an Edit interactions button. Here, you can add popups to your layer when specific actions (clicking or hovering the mouse) are made (e.g.: Clicking on a building and displaying its height) Layer legend On the Layer legend panel, you can add legends to your layer (barscale, simple-color, icons or circles and colorize them. Creating a Carto integrated Layer When the checkbox Use integration is selected, the following field shows up: SQL Query: Code that'll be used to retrieve layer data from Carto. To get this SQL Query, go to your Carto Dashboard page and click on the map which has the layer to be used in the plugin. Inside the map page, a layer list will be shown. Select a layer and go to Data tab. At the sidebar's bottom, change from Values to SQL . The code that will be shown is the SQL Query. Attributions Here is where you can give layer credits, setting a link to download it or access more information about it. These attributions will be shown on the bottom of the map and inside the popup that shows up when the INFO button is clicked in a map.","title":"Creating a layer"},{"location":"layer-post/#creating-a-layer","text":"One of the custom post types that JEO plugin provides is Layer . Is in the layer where you will be able to add legend and color to your map. A map may contain one or more layers. Entering the Layer post editor, you'll see a preview of the current layer (or a default layer if the current layer haven't been edited yet) and four sidebar panels: Settings , Carto Integration , Attributions and Legend .","title":"Creating a layer"},{"location":"layer-post/#layer-settings","text":"On the Layer settings panel, you can change the layer type. JEO supports four layer types out-of-the-box: Mapbox styles Mapbox tilesets Mapbox vector tiles (MVTs) TileLayers You can also inform an address, following the standard username/id , to compose your map style. If an access token is needed for this layer, you can put it into the Acess token input. There's also an Edit interactions button. Here, you can add popups to your layer when specific actions (clicking or hovering the mouse) are made (e.g.: Clicking on a building and displaying its height)","title":"Layer settings"},{"location":"layer-post/#layer-legend","text":"On the Layer legend panel, you can add legends to your layer (barscale, simple-color, icons or circles and colorize them.","title":"Layer legend"},{"location":"layer-post/#creating-a-carto-integrated-layer","text":"When the checkbox Use integration is selected, the following field shows up: SQL Query: Code that'll be used to retrieve layer data from Carto. To get this SQL Query, go to your Carto Dashboard page and click on the map which has the layer to be used in the plugin. Inside the map page, a layer list will be shown. Select a layer and go to Data tab. At the sidebar's bottom, change from Values to SQL . The code that will be shown is the SQL Query.","title":"Creating a Carto integrated Layer"},{"location":"layer-post/#attributions","text":"Here is where you can give layer credits, setting a link to download it or access more information about it. These attributions will be shown on the bottom of the map and inside the popup that shows up when the INFO button is clicked in a map.","title":"Attributions"},{"location":"map-block/","text":"Map block After creating maps , it is possible to display them apart or inside a block. This functionality makes possible to group maps, increasing your post organization. Displaying a map apart When creating a new post, note that is available a new block category: JEO . Selecting JEO Map block, you can search for any map you've created. With a map selected, you are able to choose an optional alignment ( Left , Right , Centre , Wide Width or Full Width ). Centre is the standard alignment. Left Right Wide Width Full Width Displaying grouped maps Besides the alignment option, there's also a group functionality available to arrange maps. Visualizing a map into a post If your map has more than one layer, you can swap them and select which one do you want to see, depending on the map layer settings. Check out more about map layers here","title":"Map block"},{"location":"map-block/#map-block","text":"After creating maps , it is possible to display them apart or inside a block. This functionality makes possible to group maps, increasing your post organization.","title":"Map block"},{"location":"map-block/#displaying-a-map-apart","text":"When creating a new post, note that is available a new block category: JEO . Selecting JEO Map block, you can search for any map you've created. With a map selected, you are able to choose an optional alignment ( Left , Right , Centre , Wide Width or Full Width ). Centre is the standard alignment.","title":"Displaying a map apart"},{"location":"map-block/#left","text":"","title":"Left"},{"location":"map-block/#right","text":"","title":"Right"},{"location":"map-block/#wide-width","text":"","title":"Wide Width"},{"location":"map-block/#full-width","text":"","title":"Full Width"},{"location":"map-block/#displaying-grouped-maps","text":"Besides the alignment option, there's also a group functionality available to arrange maps.","title":"Displaying grouped maps"},{"location":"map-block/#visualizing-a-map-into-a-post","text":"If your map has more than one layer, you can swap them and select which one do you want to see, depending on the map layer settings. Check out more about map layers here","title":"Visualizing a map into a post"},{"location":"map-embed/","text":"Embedding a map JEO plugin allows a map to be inserted into a post by pasting a link on the editor. This is what is called Embed map and it's very easy to be done. When editing a Map , one of the setting panels is Status & Visibility . There you can find the embed URL of that specific map. Copying this link and pasting on the post editor will result on an embed map. Warning : If your post displays a Not Found error, do the following steps: Go to Wordpress Dashboard > Settings > Permalinks Change the Common Settings (you may change to a different setting and then change back to the original) and click on Save Changes Now you should be able to see the embed maps with no problems.","title":"Embedding a map"},{"location":"map-embed/#embedding-a-map","text":"JEO plugin allows a map to be inserted into a post by pasting a link on the editor. This is what is called Embed map and it's very easy to be done. When editing a Map , one of the setting panels is Status & Visibility . There you can find the embed URL of that specific map. Copying this link and pasting on the post editor will result on an embed map. Warning : If your post displays a Not Found error, do the following steps: Go to Wordpress Dashboard > Settings > Permalinks Change the Common Settings (you may change to a different setting and then change back to the original) and click on Save Changes Now you should be able to see the embed maps with no problems.","title":"Embedding a map"},{"location":"map-post/","text":"Creating maps One of the custom post types that JEO plugin provides is Map . Entering the Map post editor, you'll see a preview of the current map (or a default map, if no layers are selected) and three sidebar panels: Map settings , Map layers , and Related posts . Map settings On the Map settings panel, you can change the initial center of the map setting a latitude and longitude. You can also change the default zoom settings or even disable it. When visualizing a map in a post, clicking with right button of the mouse and dragging it makes the map rotate. Also, scrolling the mouse wheel changes the map zoom. Both of these options can be enabled or disabled with the checkboxes. Map layers On the Map layers panel, you can visualize all the layers which are part of the map. Clicking on the Edit layers settings , a popup will open. There, you can add, remove and rearrange layers, define their types and whether its legends will be shown on the map. Also, you can selec which specific interactions you want to work with this especific map by clicking on Load interactions . A legend can be of one of these types: Fixed : the layer will always be shown in the map; Switchable : the layer visibility can be toggled on and off; Swappable : only one swappable layer can be visible at a time. Checkout how to create new layers here Related posts On the Related posts panel, you can set which geolocated posts will be used as markers on the post. You can filter the posts by categories, tags, dates interval or, for advanced uses, meta queries using WordPress post_meta .","title":"Creating maps"},{"location":"map-post/#creating-maps","text":"One of the custom post types that JEO plugin provides is Map . Entering the Map post editor, you'll see a preview of the current map (or a default map, if no layers are selected) and three sidebar panels: Map settings , Map layers , and Related posts .","title":"Creating maps"},{"location":"map-post/#map-settings","text":"On the Map settings panel, you can change the initial center of the map setting a latitude and longitude. You can also change the default zoom settings or even disable it. When visualizing a map in a post, clicking with right button of the mouse and dragging it makes the map rotate. Also, scrolling the mouse wheel changes the map zoom. Both of these options can be enabled or disabled with the checkboxes.","title":"Map settings"},{"location":"map-post/#map-layers","text":"On the Map layers panel, you can visualize all the layers which are part of the map. Clicking on the Edit layers settings , a popup will open. There, you can add, remove and rearrange layers, define their types and whether its legends will be shown on the map. Also, you can selec which specific interactions you want to work with this especific map by clicking on Load interactions . A legend can be of one of these types: Fixed : the layer will always be shown in the map; Switchable : the layer visibility can be toggled on and off; Swappable : only one swappable layer can be visible at a time. Checkout how to create new layers here","title":"Map layers"},{"location":"map-post/#related-posts","text":"On the Related posts panel, you can set which geolocated posts will be used as markers on the post. You can filter the posts by categories, tags, dates interval or, for advanced uses, meta queries using WordPress post_meta .","title":"Related posts"},{"location":"map-shortcode/","text":"Map shortcode A map can be inserted on any page or post using the jeo-map shortcode. The shortcode accepts three attributes: map_id (required): The ID of the map you want to insert; width (optional): The width of the map. It'll default to 600px or whatever the active theme defines for the 'div.jeomap' CSS class; height (optional): The height of the map. Will default to 600px or whatever the active theme defines for the 'div.jeomap' CSS class. Examples: [jeo-map map_id=99] You have to inform at least the ID of the Map you want to insert. By default, it will be inserted with a size of 600\u00d7600px (or whatever the active theme defines), but you can also change it: [jeo-map map_id=99 width=\"800px\" height=\"800px\"]","title":"Map shortcode"},{"location":"map-shortcode/#map-shortcode","text":"A map can be inserted on any page or post using the jeo-map shortcode. The shortcode accepts three attributes: map_id (required): The ID of the map you want to insert; width (optional): The width of the map. It'll default to 600px or whatever the active theme defines for the 'div.jeomap' CSS class; height (optional): The height of the map. Will default to 600px or whatever the active theme defines for the 'div.jeomap' CSS class. Examples: [jeo-map map_id=99] You have to inform at least the ID of the Map you want to insert. By default, it will be inserted with a size of 600\u00d7600px (or whatever the active theme defines), but you can also change it: [jeo-map map_id=99 width=\"800px\" height=\"800px\"]","title":"Map shortcode"},{"location":"one-time-map-block/","text":"One-time map block It is possible to use maps into posts without having to create a new map or using an existing one. For this, JEO plugin makes availabe another type of block: One-time map . When creating a new post, note that is available a new block category: JEO . Selecting JEO One-time Map block, a standard map preview will appear. This type of map allow all the same customizations of a normal JEO Map , such as: modifying coordinates, zoom settings, related posts, alignment options and layers settings . To know more precisely how to customize all these options, check out JEO Map page.","title":"One-time map block"},{"location":"one-time-map-block/#one-time-map-block","text":"It is possible to use maps into posts without having to create a new map or using an existing one. For this, JEO plugin makes availabe another type of block: One-time map . When creating a new post, note that is available a new block category: JEO . Selecting JEO One-time Map block, a standard map preview will appear. This type of map allow all the same customizations of a normal JEO Map , such as: modifying coordinates, zoom settings, related posts, alignment options and layers settings . To know more precisely how to customize all these options, check out JEO Map page.","title":"One-time map block"},{"location":"dev/geo-information/","text":"Geographical Information of a post Each post can be related to one or more points on the map. For each point, JEO collects geographical information such as city and country names. For complete information on this, see Geocoders . How geographical information is stored Each related point is stored as one entry of the _related_point metadata key. Each entry is an object with all the information retrieved by the geocoder. Here is an example of two entries related to the same post, that could be get using: get_post_meta( $post_id, '_related_point' ); '_related_point' => [ 'relevance' => 'primary', '_geocode_lat' => '-23,54659435', '_geocode_lon' => '-46,644533061712', '_geocode_full_address' => 'Edif\u00edcio Copan, Rua Ara\u00fajo, Vila Buarque, Rep\u00fablica, S\u00e3o Paulo, Regi\u00e3o Imediata de S\u00e3o Paulo, Regi\u00e3o Metropolitana de S\u00e3o Paulo, Regi\u00e3o Intermedi\u00e1ria de S\u00e3o Paulo, S\u00e3o Paulo, Regi\u00e3o Sudeste, 01046-010, Brasil', '_geocode_country' => 'Brasil', '_geocode_country_code' => '', '_geocode_city' => 'S\u00e3o Paulo', '_geocode_region_level_2' => 'S\u00e3o Paulo', '_geocode_region_level_3' => 'Regi\u00e3o Intermedi\u00e1ria de S\u00e3o Paulo', '_geocode_city_level_1' => 'Vila Buarque', ], '_related_point' => [ 'relevance' => 'secondary', '_geocode_lat' => '-23,183525102463', '_geocode_lon' => '-46,898231506348', '_geocode_full_address' => 'Rua Jorge Gebran, Parque do Col\u00e9gio, Ch\u00e1cara Urbana, Jundia\u00ed, Regi\u00e3o Imediata de Jundia\u00ed, Regi\u00e3o Intermedi\u00e1ria de Campinas, S\u00e3o Paulo, Regi\u00e3o Sudeste, 13209-090, Brasil', '_geocode_country' => 'Brasil', '_geocode_country_code' => '', '_geocode_city' => 'Jundia\u00ed', '_geocode_region_level_2' => 'S\u00e3o Paulo', '_geocode_region_level_3' => 'Regi\u00e3o Intermedi\u00e1ria de Campinas', '_geocode_city_level_1' => 'Parque do Col\u00e9gio', ] How to search for posts by geoinformation? (indexes) When you save geographical information of the points, JEO also creates other metadata that will allow developers to query posts by specific geographical information. Since each point is stored as a serialized data in the database, this would not allow us to filter posts by country_code for example. That's why we create indexes. For the example above, this post would also have one individual metadata entry for each information, like this: [ '_geocode_lat_p' => '-23,54659435', '_geocode_lon_p' => '-46,644533061712', '_geocode_country_p' => 'Brasil', '_geocode_country_code_p' => '', '_geocode_city_p' => 'S\u00e3o Paulo', '_geocode_region_level_2_p' => 'S\u00e3o Paulo', '_geocode_region_level_3_p' => 'Regi\u00e3o Intermedi\u00e1ria de S\u00e3o Paulo', '_geocode_city_level_1_p' => 'Vila Buarque', '_geocode_lat_s' => '-23,183525102463', '_geocode_lon_s' => '-46,898231506348', '_geocode_country_s' => 'Brasil', '_geocode_country_code_s' => '', '_geocode_city_s' => 'Jundia\u00ed', '_geocode_region_level_2_s' => 'S\u00e3o Paulo', '_geocode_region_level_3_s' => 'Regi\u00e3o Intermedi\u00e1ria de Campinas', '_geocode_city_level_1_s' => 'Parque do Col\u00e9gio', ] Note: _s and _p suffixes indicate if the relevance of that information is primary or secondary. Note 2: Full addresses are not indexed Now we have all the information as individual metadata and this allows me to query by them, however, the pairs are disconnected (if I had more than one primary point, it would be impossible to know what are the latitude-longitude pairs. That's why the information we actually use is the serialized object). Fetching posts by geoinformation Give me all the posts that have primary points with the country code 'BR' : $posts = new WP_Query([ 'meta_query' => [ [ 'key' => '_geocode_country_code_p', 'value' => 'BR' ] ] ]); Give me all the posts whose city is 'Manaus' : $posts = new WP_Query([ 'meta_query' => [ [ 'key' => '_geocode_city_s', 'value' => 'Manaus' ], [ 'key' => '_geocode_city_p', 'value' => 'Manaus' ], 'relation' => 'OR' ] ]);","title":"Geographical Information of a post"},{"location":"dev/geo-information/#geographical-information-of-a-post","text":"Each post can be related to one or more points on the map. For each point, JEO collects geographical information such as city and country names. For complete information on this, see Geocoders .","title":"Geographical Information of a post"},{"location":"dev/geo-information/#how-geographical-information-is-stored","text":"Each related point is stored as one entry of the _related_point metadata key. Each entry is an object with all the information retrieved by the geocoder. Here is an example of two entries related to the same post, that could be get using: get_post_meta( $post_id, '_related_point' ); '_related_point' => [ 'relevance' => 'primary', '_geocode_lat' => '-23,54659435', '_geocode_lon' => '-46,644533061712', '_geocode_full_address' => 'Edif\u00edcio Copan, Rua Ara\u00fajo, Vila Buarque, Rep\u00fablica, S\u00e3o Paulo, Regi\u00e3o Imediata de S\u00e3o Paulo, Regi\u00e3o Metropolitana de S\u00e3o Paulo, Regi\u00e3o Intermedi\u00e1ria de S\u00e3o Paulo, S\u00e3o Paulo, Regi\u00e3o Sudeste, 01046-010, Brasil', '_geocode_country' => 'Brasil', '_geocode_country_code' => '', '_geocode_city' => 'S\u00e3o Paulo', '_geocode_region_level_2' => 'S\u00e3o Paulo', '_geocode_region_level_3' => 'Regi\u00e3o Intermedi\u00e1ria de S\u00e3o Paulo', '_geocode_city_level_1' => 'Vila Buarque', ], '_related_point' => [ 'relevance' => 'secondary', '_geocode_lat' => '-23,183525102463', '_geocode_lon' => '-46,898231506348', '_geocode_full_address' => 'Rua Jorge Gebran, Parque do Col\u00e9gio, Ch\u00e1cara Urbana, Jundia\u00ed, Regi\u00e3o Imediata de Jundia\u00ed, Regi\u00e3o Intermedi\u00e1ria de Campinas, S\u00e3o Paulo, Regi\u00e3o Sudeste, 13209-090, Brasil', '_geocode_country' => 'Brasil', '_geocode_country_code' => '', '_geocode_city' => 'Jundia\u00ed', '_geocode_region_level_2' => 'S\u00e3o Paulo', '_geocode_region_level_3' => 'Regi\u00e3o Intermedi\u00e1ria de Campinas', '_geocode_city_level_1' => 'Parque do Col\u00e9gio', ]","title":"How geographical information is stored"},{"location":"dev/geo-information/#how-to-search-for-posts-by-geoinformation-indexes","text":"When you save geographical information of the points, JEO also creates other metadata that will allow developers to query posts by specific geographical information. Since each point is stored as a serialized data in the database, this would not allow us to filter posts by country_code for example. That's why we create indexes. For the example above, this post would also have one individual metadata entry for each information, like this: [ '_geocode_lat_p' => '-23,54659435', '_geocode_lon_p' => '-46,644533061712', '_geocode_country_p' => 'Brasil', '_geocode_country_code_p' => '', '_geocode_city_p' => 'S\u00e3o Paulo', '_geocode_region_level_2_p' => 'S\u00e3o Paulo', '_geocode_region_level_3_p' => 'Regi\u00e3o Intermedi\u00e1ria de S\u00e3o Paulo', '_geocode_city_level_1_p' => 'Vila Buarque', '_geocode_lat_s' => '-23,183525102463', '_geocode_lon_s' => '-46,898231506348', '_geocode_country_s' => 'Brasil', '_geocode_country_code_s' => '', '_geocode_city_s' => 'Jundia\u00ed', '_geocode_region_level_2_s' => 'S\u00e3o Paulo', '_geocode_region_level_3_s' => 'Regi\u00e3o Intermedi\u00e1ria de Campinas', '_geocode_city_level_1_s' => 'Parque do Col\u00e9gio', ] Note: _s and _p suffixes indicate if the relevance of that information is primary or secondary. Note 2: Full addresses are not indexed Now we have all the information as individual metadata and this allows me to query by them, however, the pairs are disconnected (if I had more than one primary point, it would be impossible to know what are the latitude-longitude pairs. That's why the information we actually use is the serialized object).","title":"How to search for posts by geoinformation? (indexes)"},{"location":"dev/geo-information/#fetching-posts-by-geoinformation","text":"Give me all the posts that have primary points with the country code 'BR' : $posts = new WP_Query([ 'meta_query' => [ [ 'key' => '_geocode_country_code_p', 'value' => 'BR' ] ] ]); Give me all the posts whose city is 'Manaus' : $posts = new WP_Query([ 'meta_query' => [ [ 'key' => '_geocode_city_s', 'value' => 'Manaus' ], [ 'key' => '_geocode_city_p', 'value' => 'Manaus' ], 'relation' => 'OR' ] ]);","title":"Fetching posts by geoinformation"},{"location":"dev/geocoders/","text":"Writing a Geocoder A Geocoder is a service that finds geographical coordinates from a search by address information. It's also able to get address details based on the geographical coordinates, which is called Reverse Geocoding. JEO needs a geocoder service in a few situations, such as when users indicate to where on a map a story (posts) is related. JEO comes with two native geocoder services users can choose from: Nominatim and Google. But new services can easily be added by plugins. This page documents how to do this. Registering a Geocoder Hook a function to the jeo_register_geocoders action and call the register with the following code: add_action('jeo_register_geocoders', function($geocoders) { $geocoders->register_geocoder([ 'slug' => 'my-geocoder', 'name' => 'My Geocoder', 'description' => __('My Geocoder description', 'my-textdomain'), 'class_name' => 'MyGeocoderClass' ]); }); This will tell JEO that there is a new Geocoder service available and give some information about it. Name and description will be used in the Administration panel so the admin can recognize and choose from the available Geocoders which one is to be used. slug needs to be a unique identifier for the geocoder class_name is the name of the Geocoder class Creating the Geocoder class Now we need to create the geocoder class. This will be a class that extends \\Jeo\\Geocoder and implement some methods that do the actual geocoding. Inside the same hook, declare the class and two required methods: geocode($search_string) The method that receives the search string, does the request to the geocoder servers and returns the coordinates and address details; reverse_geocode($lat, $lon) The method that receives latitude and longitude, requests the geocoder server, and returns the full location details in the same format as the geocode method does. While geocode() returns an array of search results, reverse_geocode() returns only one result. Each result is an array that must have only the keys expected by the JEO plugin, so each Geocoder must find the best correspondence between each field and the fields expected by JEO. Note: Only lat and lon are required. Sample response with all accepted fields: [ [ 'lat' => '', 'lon' => '', 'full_address' => '', 'country' => '', 'country_code' => '', 'region_level_1' => '', 'region_level_2' => '', // State goes here 'region_level_3' => '', 'city' => '', 'city_level_1' => '', ] ] Here is a simple example: add_action('jeo_register_geocoders', function($geocoders) { $geocoders->register_geocoder([ 'slug' => 'my-geocoder', 'name' => 'My Geocoder', 'description' => __('My Geocoder description', 'my-textdomain'), 'class_name' => 'MyGeocoderClass' ]); class MyGeocoderClass extends \\Jeo\\Geocoder { public function geocode($search_string) { $params = [ 'q' => $search_string, 'format' => 'json', 'addressdetails' => 1 ]; $r = wp_remote_get( add_query_arg($params, 'https://my-geocoder-server.org/search') ); $data = wp_remote_retrieve_body( $r ); $data = \\json_decode($data); $response = []; if (\\is_array($data)) { foreach ($data as $match) { $r = $this->format_response_item( (array) $match ); if ($r) $response[] = $r; } } return $response; } public function reverse_geocode($lat, $lon) { $params = [ 'lat' => $lat, 'lon' => $lon, 'format' => 'json', 'addressdetails' => 1 ]; $r = wp_remote_get( add_query_arg($params, 'https://my-geocoder-server.org/reverse') ); $data = wp_remote_retrieve_body( $r ); $data = \\json_decode($data); return $this->format_response_item( (array) $data ); } private function format_response_item($match) { $response = [ 'lat' => $match['lat'], 'lon' => $match['lon'], 'full_address' => $match['display_name'], 'country' => $match['country'], 'country_code' => $match['country_code'], 'region_level_1' => $match['region_level_1'], 'region_level_2' => $match['region_level_2'], // State goes here 'region_level_3' => $match['region_level_3'], 'city' => $match['city'], 'city_level_1' => $match['city_level_1'], ]; return $response; } } }); And that's it! Your new Geocoder is ready! Adding additional Settings to the Geocoder Some geocoder services might need or offer additional settings. Some might require the user to enter its API key, others might let the users restrict the search to a specific country to get better results when searching. You can also easily add new settings to your Geocoder that will automatically be presented to the user on the Settings page. Declare a method get_settings() in your class that will return an array of all the settings your Geocoder accepts. Each setting is described by an array with the following keys: slug : a slug for your option. You don't have to worry about naming conflicts, it will be stored inside your geocoders options; name : a human-readable name; description : an explanation to the user of what this setting is. Let's see an example only with the relevant code: add_action('jeo_register_geocoders', function($geocoders) { // ... class MyGeocoderClass extends \\Jeo\\Geocoder { // ... public function get_settings() { // Note it is an array of arrays return [ [ 'slug' => 'api_key', 'name' => __('API Key', 'my-text-domain'), 'description' => __('Enter the API key you can get visiting your panel at my-gecoder.org/panel', 'my-text-domain') ] ]; } } }); And this is what you will see in the admin panel: Accessing Settings values Now that you have registered a setting and the user can change its value in the admin panel, you can use it in your geocoder. To get its value, simply call $this->get_option($option_name) . Example: // ... // ... public function geocode($search_string) { $params = [ 'q' => $search_string, 'format' => 'json', 'addressdetails' => 1, 'api_key' => $this->get_option('api_key') ]; // ... return $response; } // ... Declaring default values You can also add the get_default_options() method to your class to set default values for each setting. This is optional and is done like this: add_action('jeo_register_geocoders', function($geocoders) { // ... class MyGeocoderClass extends \\Jeo\\Geocoder { // ... public function get_default_options() { return [ 'api_key' => 'sand-box-api-key' // the key must match the slug of the setting registered in get_settings() ]; } } }); Advanced: Even further settings customization If your geocoder needs some special settings that a simple text input won't handle, there is yet another method you can declare to add arbitrary HTML code to the Settings page. settings_footer($settings) must echo HTML code that will be rendered at the end of your Geocoder settings page. It received the $settings object, which is an instance of \\Jeo\\Settings and have some helpers you can use. You only need to print form fields with the right names and JEO will take care of saving them for you. To get the right field name use $settings->get_geocoder_option_field_name($name) . Example: // ... // ... public function settings_footer($settings) { ?> <p><strong>My Select option</strong></p> <select name=\"<?php echo $settings->get_geocoder_option_field_name('new_option'); ?>\"> <option value=\"yes\" <?php selected( $this->get_option('new_option'), 'yes' ); ?> > Yes </select> <option value=\"no\" <?php selected( $this->get_option('new_option'), 'no' ); ?> > No </select> </select> <?php } // ... Note: selected() is a native WordPress function. See the official documentation","title":"Writing a Geocoder"},{"location":"dev/geocoders/#writing-a-geocoder","text":"A Geocoder is a service that finds geographical coordinates from a search by address information. It's also able to get address details based on the geographical coordinates, which is called Reverse Geocoding. JEO needs a geocoder service in a few situations, such as when users indicate to where on a map a story (posts) is related. JEO comes with two native geocoder services users can choose from: Nominatim and Google. But new services can easily be added by plugins. This page documents how to do this.","title":"Writing a Geocoder"},{"location":"dev/geocoders/#registering-a-geocoder","text":"Hook a function to the jeo_register_geocoders action and call the register with the following code: add_action('jeo_register_geocoders', function($geocoders) { $geocoders->register_geocoder([ 'slug' => 'my-geocoder', 'name' => 'My Geocoder', 'description' => __('My Geocoder description', 'my-textdomain'), 'class_name' => 'MyGeocoderClass' ]); }); This will tell JEO that there is a new Geocoder service available and give some information about it. Name and description will be used in the Administration panel so the admin can recognize and choose from the available Geocoders which one is to be used. slug needs to be a unique identifier for the geocoder class_name is the name of the Geocoder class","title":"Registering a Geocoder"},{"location":"dev/geocoders/#creating-the-geocoder-class","text":"Now we need to create the geocoder class. This will be a class that extends \\Jeo\\Geocoder and implement some methods that do the actual geocoding. Inside the same hook, declare the class and two required methods: geocode($search_string) The method that receives the search string, does the request to the geocoder servers and returns the coordinates and address details; reverse_geocode($lat, $lon) The method that receives latitude and longitude, requests the geocoder server, and returns the full location details in the same format as the geocode method does. While geocode() returns an array of search results, reverse_geocode() returns only one result. Each result is an array that must have only the keys expected by the JEO plugin, so each Geocoder must find the best correspondence between each field and the fields expected by JEO. Note: Only lat and lon are required. Sample response with all accepted fields: [ [ 'lat' => '', 'lon' => '', 'full_address' => '', 'country' => '', 'country_code' => '', 'region_level_1' => '', 'region_level_2' => '', // State goes here 'region_level_3' => '', 'city' => '', 'city_level_1' => '', ] ] Here is a simple example: add_action('jeo_register_geocoders', function($geocoders) { $geocoders->register_geocoder([ 'slug' => 'my-geocoder', 'name' => 'My Geocoder', 'description' => __('My Geocoder description', 'my-textdomain'), 'class_name' => 'MyGeocoderClass' ]); class MyGeocoderClass extends \\Jeo\\Geocoder { public function geocode($search_string) { $params = [ 'q' => $search_string, 'format' => 'json', 'addressdetails' => 1 ]; $r = wp_remote_get( add_query_arg($params, 'https://my-geocoder-server.org/search') ); $data = wp_remote_retrieve_body( $r ); $data = \\json_decode($data); $response = []; if (\\is_array($data)) { foreach ($data as $match) { $r = $this->format_response_item( (array) $match ); if ($r) $response[] = $r; } } return $response; } public function reverse_geocode($lat, $lon) { $params = [ 'lat' => $lat, 'lon' => $lon, 'format' => 'json', 'addressdetails' => 1 ]; $r = wp_remote_get( add_query_arg($params, 'https://my-geocoder-server.org/reverse') ); $data = wp_remote_retrieve_body( $r ); $data = \\json_decode($data); return $this->format_response_item( (array) $data ); } private function format_response_item($match) { $response = [ 'lat' => $match['lat'], 'lon' => $match['lon'], 'full_address' => $match['display_name'], 'country' => $match['country'], 'country_code' => $match['country_code'], 'region_level_1' => $match['region_level_1'], 'region_level_2' => $match['region_level_2'], // State goes here 'region_level_3' => $match['region_level_3'], 'city' => $match['city'], 'city_level_1' => $match['city_level_1'], ]; return $response; } } }); And that's it! Your new Geocoder is ready!","title":"Creating the Geocoder class"},{"location":"dev/geocoders/#adding-additional-settings-to-the-geocoder","text":"Some geocoder services might need or offer additional settings. Some might require the user to enter its API key, others might let the users restrict the search to a specific country to get better results when searching. You can also easily add new settings to your Geocoder that will automatically be presented to the user on the Settings page. Declare a method get_settings() in your class that will return an array of all the settings your Geocoder accepts. Each setting is described by an array with the following keys: slug : a slug for your option. You don't have to worry about naming conflicts, it will be stored inside your geocoders options; name : a human-readable name; description : an explanation to the user of what this setting is. Let's see an example only with the relevant code: add_action('jeo_register_geocoders', function($geocoders) { // ... class MyGeocoderClass extends \\Jeo\\Geocoder { // ... public function get_settings() { // Note it is an array of arrays return [ [ 'slug' => 'api_key', 'name' => __('API Key', 'my-text-domain'), 'description' => __('Enter the API key you can get visiting your panel at my-gecoder.org/panel', 'my-text-domain') ] ]; } } }); And this is what you will see in the admin panel:","title":"Adding additional Settings to the Geocoder"},{"location":"dev/geocoders/#accessing-settings-values","text":"Now that you have registered a setting and the user can change its value in the admin panel, you can use it in your geocoder. To get its value, simply call $this->get_option($option_name) . Example: // ... // ... public function geocode($search_string) { $params = [ 'q' => $search_string, 'format' => 'json', 'addressdetails' => 1, 'api_key' => $this->get_option('api_key') ]; // ... return $response; } // ...","title":"Accessing Settings values"},{"location":"dev/geocoders/#declaring-default-values","text":"You can also add the get_default_options() method to your class to set default values for each setting. This is optional and is done like this: add_action('jeo_register_geocoders', function($geocoders) { // ... class MyGeocoderClass extends \\Jeo\\Geocoder { // ... public function get_default_options() { return [ 'api_key' => 'sand-box-api-key' // the key must match the slug of the setting registered in get_settings() ]; } } });","title":"Declaring default values"},{"location":"dev/geocoders/#advanced-even-further-settings-customization","text":"If your geocoder needs some special settings that a simple text input won't handle, there is yet another method you can declare to add arbitrary HTML code to the Settings page. settings_footer($settings) must echo HTML code that will be rendered at the end of your Geocoder settings page. It received the $settings object, which is an instance of \\Jeo\\Settings and have some helpers you can use. You only need to print form fields with the right names and JEO will take care of saving them for you. To get the right field name use $settings->get_geocoder_option_field_name($name) . Example: // ... // ... public function settings_footer($settings) { ?> <p><strong>My Select option</strong></p> <select name=\"<?php echo $settings->get_geocoder_option_field_name('new_option'); ?>\"> <option value=\"yes\" <?php selected( $this->get_option('new_option'), 'yes' ); ?> > Yes </select> <option value=\"no\" <?php selected( $this->get_option('new_option'), 'no' ); ?> > No </select> </select> <?php } // ... Note: selected() is a native WordPress function. See the official documentation","title":"Advanced: Even further settings customization"},{"location":"dev/layer-types-api/","text":"Mapbox Sources, Layers and JEO How sources and layers settings works at Mapbox API and how JEO deals with them Table of Contents Mapbox Sources, Layers and JEO Table of Contents Introduction Mapbox Styles Mapbox Layers Types and Sources of a Layer Mapbox Sources On sourceLayer attribute of a Source component How the Layer Settings page of JEO Plugin works Corner cases and other observations Introduction This document describes how to interact with Mapbox, MapboxGL and React MapboxGL APIs. It is organised in a way that summarize key infos of those tools docs and gives examples of we are using them at our code. Mapbox Styles Mapbox Maps service is composed of several APIs and every type of layer has some particularities which we must pay attention. Accordingly which Mapbox docs, a Mapbox style consists of a set of root properties, some of which describe a single global propertie and some of which contain nested properties, like version, and name and metadata and does not influence over the appearance or behavior of your map. Others, like layers and sources determine our map features and what they will look like. Those are the particularities that we will further discuss from now. More at Mapbox Style Specification . Mapbox Layers A style's layers property lists all the layers available in that style. Types and Sources of a Layer The type of layer is specified by the \"type\" property and must be one of: For type vector : - background; - fill; - line; - symbol; - circle; - fill-extrusion; - heatmap; - hillshade. For type raster : - raster; Except for layers of the background type, each layer needs to refer to a source. The source of a layer is the name of a source description to be user for this layer. JSON settings Your settings of a layer should be something like: \"layers\": [{ \"id\": \"water\", \"source\": \"mapbox-streets\", \"source-layer\": \"water\", \"type\": \"fill\", \"paint\": { \"fill-color\": \"#00ffff\" } }] More at Mapbox Spec Layers . MapboxGL React We can set a <Layer> component like: import { Layer } from \"react-mapbox-gl\"; ... <Layer type=\"symbol\" id=\"water\", source=\"mapbox-streets\", sourceLayer=\"water\", // by definition, the source type must be vector type type=\"fill\", paint={{ \"fill-color\": \"#00ffff\" }}> </Layer> More at react-mapbox-gl docs . Mapbox Sources Sources state which data the map should display. Specify the type of source with the type property, which must be one of: vector; raster; raster-dem; geojson; image; video. Please note that a Layer can have a type and a source . And a Source is not the same as the layer source and this Source has a type . Adding a source isn't enough to make data appear on the map because sources don't contain styling details like color or width. Tiled sources, vector and raster, must specify their details according to the TileJSON specification . At JEO plugin you can supply those infos as tiles or as url . Note that the following exams is based on a source vector type . JSON settings Your settings of a source should be something like: tiles : ``` \"mapbox-streets\": { \"type\": \"vector\", \"tiles\": [ \"http://a.example.com/tiles/{z}/{x}/{y}.pbf\", \"http://b.example.com/tiles/{z}/{x}/{y}.pbf\" ], \"maxzoom\": 14 } ``` url : \"mapbox-streets\": { \"type\": \"vector\", \"url\": \"http://api.example.com/tilejson.json\" } More at react-mapbox-gl docs . MapboxGL React We can set up a <Source/> component like: tiles : ``` import { Source } from \"react-mapbox-gl\"; ... const SOURCE_OPTIONS = { \"type\": \"vector\", // note this line \"tiles\": [ \"http://a.example.com/tiles/{z}/{x}/{y}.pbf\", \"http://b.example.com/tiles/{z}/{x}/{y}.pbf\" ], \"maxzoom\": 14 }; <Source id=\"source_id\" tileJsonSource={SOURCE_OPTIONS} /> <Layer type=\"vector\" // note this line id=\"layer_id\" sourceId=\"source_id\" /> `` - url`: ``` import { Source } from \"react-mapbox-gl\"; ... const SOURCE_OPTIONS = { \"url\": \"http://api.example.com/tilejson.json\", \"type\": \"vector\", // note this line }; <Source id=\"source_id\" tileJsonSource={SOURCE_OPTIONS} /> <Layer type=\"vector\" // note this line id=\"layer_id\" sourceId=\"source_id\" sourceLayer={ source_layer } // see onSource section for more info /> ``` For a raster source, we can define like this: ``` import { Source } from \"react-mapbox-gl\"; ... const RASTER_SOURCE_OPTIONS = { \"type\": \"raster\", // note this line \"tiles\": [ \"https://someurl.com/512/{z}/{x}/{y}\", ], \"tileSize\": 512 }; <Source id=\"source_id\" tileJsonSource={RASTER_SOURCE_OPTIONS} /> <Layer type=\"raster\" // note this line id=\"layer_id\" sourceId=\"source_id\" /> ``` More about how to configure a Source component at react-mapbox-gl docs . On sourceLayer attribute of a Source component If your Layer is of the vector type, your sourceLayer will indicate an individual layer of data within your vector source . You can learn more info on where you can find the name of this property at Mapbox source-layer glossary . Otherwise, if your Layer have a raster type, this property will be ignored . <Source id=\"source_id\" tileJsonSource={{ type: \"raster\" // note this line }} /> <Layer type=\"raster\" // note this line sourceLayer=\"anything\" // this info will be ignored id=\"layer_id\" sourceId=\"source_id\" /> How the Layer Settings page of JEO Plugin works Corner cases and other observations","title":"Mapbox Sources, Layers and JEO"},{"location":"dev/layer-types-api/#mapbox-sources-layers-and-jeo","text":"How sources and layers settings works at Mapbox API and how JEO deals with them","title":"Mapbox Sources, Layers and JEO"},{"location":"dev/layer-types-api/#table-of-contents","text":"Mapbox Sources, Layers and JEO Table of Contents Introduction Mapbox Styles Mapbox Layers Types and Sources of a Layer Mapbox Sources On sourceLayer attribute of a Source component How the Layer Settings page of JEO Plugin works Corner cases and other observations","title":"Table of Contents"},{"location":"dev/layer-types-api/#introduction","text":"This document describes how to interact with Mapbox, MapboxGL and React MapboxGL APIs. It is organised in a way that summarize key infos of those tools docs and gives examples of we are using them at our code.","title":"Introduction"},{"location":"dev/layer-types-api/#mapbox-styles","text":"Mapbox Maps service is composed of several APIs and every type of layer has some particularities which we must pay attention. Accordingly which Mapbox docs, a Mapbox style consists of a set of root properties, some of which describe a single global propertie and some of which contain nested properties, like version, and name and metadata and does not influence over the appearance or behavior of your map. Others, like layers and sources determine our map features and what they will look like. Those are the particularities that we will further discuss from now. More at Mapbox Style Specification .","title":"Mapbox Styles"},{"location":"dev/layer-types-api/#mapbox-layers","text":"A style's layers property lists all the layers available in that style.","title":"Mapbox Layers"},{"location":"dev/layer-types-api/#types-and-sources-of-a-layer","text":"The type of layer is specified by the \"type\" property and must be one of: For type vector : - background; - fill; - line; - symbol; - circle; - fill-extrusion; - heatmap; - hillshade. For type raster : - raster; Except for layers of the background type, each layer needs to refer to a source. The source of a layer is the name of a source description to be user for this layer. JSON settings Your settings of a layer should be something like: \"layers\": [{ \"id\": \"water\", \"source\": \"mapbox-streets\", \"source-layer\": \"water\", \"type\": \"fill\", \"paint\": { \"fill-color\": \"#00ffff\" } }] More at Mapbox Spec Layers . MapboxGL React We can set a <Layer> component like: import { Layer } from \"react-mapbox-gl\"; ... <Layer type=\"symbol\" id=\"water\", source=\"mapbox-streets\", sourceLayer=\"water\", // by definition, the source type must be vector type type=\"fill\", paint={{ \"fill-color\": \"#00ffff\" }}> </Layer> More at react-mapbox-gl docs .","title":"Types and Sources of a Layer"},{"location":"dev/layer-types-api/#mapbox-sources","text":"Sources state which data the map should display. Specify the type of source with the type property, which must be one of: vector; raster; raster-dem; geojson; image; video. Please note that a Layer can have a type and a source . And a Source is not the same as the layer source and this Source has a type . Adding a source isn't enough to make data appear on the map because sources don't contain styling details like color or width. Tiled sources, vector and raster, must specify their details according to the TileJSON specification . At JEO plugin you can supply those infos as tiles or as url . Note that the following exams is based on a source vector type . JSON settings Your settings of a source should be something like: tiles : ``` \"mapbox-streets\": { \"type\": \"vector\", \"tiles\": [ \"http://a.example.com/tiles/{z}/{x}/{y}.pbf\", \"http://b.example.com/tiles/{z}/{x}/{y}.pbf\" ], \"maxzoom\": 14 } ``` url : \"mapbox-streets\": { \"type\": \"vector\", \"url\": \"http://api.example.com/tilejson.json\" } More at react-mapbox-gl docs . MapboxGL React We can set up a <Source/> component like: tiles : ``` import { Source } from \"react-mapbox-gl\"; ... const SOURCE_OPTIONS = { \"type\": \"vector\", // note this line \"tiles\": [ \"http://a.example.com/tiles/{z}/{x}/{y}.pbf\", \"http://b.example.com/tiles/{z}/{x}/{y}.pbf\" ], \"maxzoom\": 14 }; <Source id=\"source_id\" tileJsonSource={SOURCE_OPTIONS} /> <Layer type=\"vector\" // note this line id=\"layer_id\" sourceId=\"source_id\" /> `` - url`: ``` import { Source } from \"react-mapbox-gl\"; ... const SOURCE_OPTIONS = { \"url\": \"http://api.example.com/tilejson.json\", \"type\": \"vector\", // note this line }; <Source id=\"source_id\" tileJsonSource={SOURCE_OPTIONS} /> <Layer type=\"vector\" // note this line id=\"layer_id\" sourceId=\"source_id\" sourceLayer={ source_layer } // see onSource section for more info /> ``` For a raster source, we can define like this: ``` import { Source } from \"react-mapbox-gl\"; ... const RASTER_SOURCE_OPTIONS = { \"type\": \"raster\", // note this line \"tiles\": [ \"https://someurl.com/512/{z}/{x}/{y}\", ], \"tileSize\": 512 }; <Source id=\"source_id\" tileJsonSource={RASTER_SOURCE_OPTIONS} /> <Layer type=\"raster\" // note this line id=\"layer_id\" sourceId=\"source_id\" /> ``` More about how to configure a Source component at react-mapbox-gl docs .","title":"Mapbox Sources"},{"location":"dev/layer-types-api/#on-sourcelayer-attribute-of-a-source-component","text":"If your Layer is of the vector type, your sourceLayer will indicate an individual layer of data within your vector source . You can learn more info on where you can find the name of this property at Mapbox source-layer glossary . Otherwise, if your Layer have a raster type, this property will be ignored . <Source id=\"source_id\" tileJsonSource={{ type: \"raster\" // note this line }} /> <Layer type=\"raster\" // note this line sourceLayer=\"anything\" // this info will be ignored id=\"layer_id\" sourceId=\"source_id\" />","title":"On sourceLayer attribute of a Source component"},{"location":"dev/layer-types-api/#how-the-layer-settings-page-of-jeo-plugin-works","text":"","title":"How the Layer Settings page of JEO Plugin works"},{"location":"dev/layer-types-api/#corner-cases-and-other-observations","text":"","title":"Corner cases and other observations"},{"location":"dev/layer-types/","text":"Adding new Layer Types This document describes how to register new Layer Types to be used in maps created with JEO. Introduction In JEO, maps are rendered using the Mapbox GL JavaScript library. Any new layer type will have to interact with this library to add the layer to the map. Basically, to add a new layer type, there are 2 simple steps: Register the new Layer type using a PHP hook, informing where is the main JavaScript file of your Layer Type; Create a JavaScript class implementing methods to add the layer to the map and to describe what are the options a layer of this type has. In short, this is all that is needed to do. In some cases, however, you might need to add extra dependencies to the project. For example, to create a Layer Type to support Carto's vector layers, we might want to add CartoVL (which is an extension to MapboxGL) to the project. Creating a new Layer Type First, let's register a new Layer Type by hooking up in the jeo_register_layer_types action: add_action('jeo_register_layer_types', function($layer_types) { $layer_types->register_layer_type( 'my-layer-type', [ 'script_url' => plugin_dir_url( __FILE__ ) . '/js/layertype.js' ] ); }); register_layer_type method gets 2 parameters. Layer type slug - A unique sanitized string (make sure to make it unique) Options - An array with the layer type options: script_url : Required. The absolute URL to your JavaScript file. dependecies : Optional. An array of scripts handles registered using [wp_register_script] ( ) that should be loaded as a dependency to the layer type main script That's all you need to do on the PHP side. All the magic happens on the JavaScript. Now, let's create our layertype.js file. In this file, we are going to register a JavaScript object using the globally available window.JeoLayerTypes.registerLayerType . The first parameter must be the same slug you defined when you registered your Layer Type on the PHP side, and second parameter is an object with, at least, three methods. window.JeoLayerTypes.registerLayerType('tilelayer', { addStyle: function(map, attributes) { // ... }, addLayer: function(map, attributes) { // ... }, getSchema: function(attributes) { // ... } }); Your Layer Type object MUST implement at least these three methods. getSchema(attributes) params : attributes - object with the layer attributes (see the section below) returns : Promise with json-schema This method will tell JEO which are the options the user has to fill in when creating a new layer of this type. For example, a raster tile layer-type might have only a URL. A Mapbox layer has the Style ID and the optional Access token. This method must return a Promise with a json-schema representation of the layer type options. This schema must only include layer-type specific information. Every layer, despite its type, has a set of common attributes, such as ID and Name. For example, the \"Tile layer\" layer type needs only a URL, so that's how its getSchema method will look like. // ... getSchema: function(attributes) { return new Promise( function(resolve, reject) { resolve({ \"type\": \"object\", \"required\": [ \"url\" ], \"properties\": { \"url\": { \"type\": \"string\", \"title\": \"URL\" } } }); }); } addStyle(map, attributes) params : map - the initialized Mapbox Map object attributes - object with the layer attributes (See Layer attributes section below) returns : The return of a call to map.setStyle In MapboxGL, every map has a Style as a base layer. This method will add the layer as the Map Style, using the setStyle method of the Map object. This method will be invoked when a layer of this type is added to the map as the base layer. For example, the \"Tile Layer\" layer type sets the style as a raster layer: // ... addStyle: function(map, attributes) { return map.setStyle({ 'version': 8, 'sources': { 'raster-tiles': { 'type': 'raster', 'tiles': [attributes.layer_type_options.url], 'tileSize': 256 } }, 'layers': [{ id: attributes.layer_id, type: 'raster', source: 'raster-tiles' }] }) } Note : The attributes.layer_type_options object holds all the properties declared in the getSchema method. That's why there is a url there! (See Layer attributes section below) addLayer(map, attributes) params : map - the initialized Mapbox Map object attributes - object with the layer attributes (See Layer attributes section below) returns : The return of a call to map.addLayer This method will add the layer to the map using the addLayer method of the Map object. This method will be invoked when a layer of this type is added to the map. For example, the \"Tile Layer\" layer type adds itself as a raster layer: // ... addLayer: function(map, attributes) { var layer = { id: attributes.layer_id, source: { type: 'raster', tiles: [attributes.layer_type_options.url], \"tileSize\": 256 }, type: 'raster' }; if ( ! attributes.visible ) { layer.layout = { visibility: 'none' }; } return map.addLayer(layer); } Note: This method must verify the value of attributes.visible to determine whether this layer should be visible when the map is initialized. Layer attributes As you saw, each of the above methods gets an argument attributes as input. This argument holds all the information of the layer the user is editing or viewing. Some attributes are common to any layer types, and others that are specific to a layer type. Every layer type-specific attribute a layer has is stored under the layer_type_options attributes. So these are the keys available in the attributes object: layer_id : (integer) A unique ID that represents this layer and identify it in the database layer_name : (string) The layer name, given by the user visible : (boolean) A flag indicating whether this layer should be visible when the map initializes layer_type_options : (object) A object with all the layer type-specific attributes (those registered in the getSchema method)","title":"Adding new Layer Types"},{"location":"dev/layer-types/#adding-new-layer-types","text":"This document describes how to register new Layer Types to be used in maps created with JEO.","title":"Adding new Layer Types"},{"location":"dev/layer-types/#introduction","text":"In JEO, maps are rendered using the Mapbox GL JavaScript library. Any new layer type will have to interact with this library to add the layer to the map. Basically, to add a new layer type, there are 2 simple steps: Register the new Layer type using a PHP hook, informing where is the main JavaScript file of your Layer Type; Create a JavaScript class implementing methods to add the layer to the map and to describe what are the options a layer of this type has. In short, this is all that is needed to do. In some cases, however, you might need to add extra dependencies to the project. For example, to create a Layer Type to support Carto's vector layers, we might want to add CartoVL (which is an extension to MapboxGL) to the project.","title":"Introduction"},{"location":"dev/layer-types/#creating-a-new-layer-type","text":"First, let's register a new Layer Type by hooking up in the jeo_register_layer_types action: add_action('jeo_register_layer_types', function($layer_types) { $layer_types->register_layer_type( 'my-layer-type', [ 'script_url' => plugin_dir_url( __FILE__ ) . '/js/layertype.js' ] ); }); register_layer_type method gets 2 parameters. Layer type slug - A unique sanitized string (make sure to make it unique) Options - An array with the layer type options: script_url : Required. The absolute URL to your JavaScript file. dependecies : Optional. An array of scripts handles registered using [wp_register_script] ( ) that should be loaded as a dependency to the layer type main script That's all you need to do on the PHP side. All the magic happens on the JavaScript. Now, let's create our layertype.js file. In this file, we are going to register a JavaScript object using the globally available window.JeoLayerTypes.registerLayerType . The first parameter must be the same slug you defined when you registered your Layer Type on the PHP side, and second parameter is an object with, at least, three methods. window.JeoLayerTypes.registerLayerType('tilelayer', { addStyle: function(map, attributes) { // ... }, addLayer: function(map, attributes) { // ... }, getSchema: function(attributes) { // ... } }); Your Layer Type object MUST implement at least these three methods.","title":"Creating a new Layer Type"},{"location":"dev/layer-types/#getschemaattributes","text":"params : attributes - object with the layer attributes (see the section below) returns : Promise with json-schema This method will tell JEO which are the options the user has to fill in when creating a new layer of this type. For example, a raster tile layer-type might have only a URL. A Mapbox layer has the Style ID and the optional Access token. This method must return a Promise with a json-schema representation of the layer type options. This schema must only include layer-type specific information. Every layer, despite its type, has a set of common attributes, such as ID and Name. For example, the \"Tile layer\" layer type needs only a URL, so that's how its getSchema method will look like. // ... getSchema: function(attributes) { return new Promise( function(resolve, reject) { resolve({ \"type\": \"object\", \"required\": [ \"url\" ], \"properties\": { \"url\": { \"type\": \"string\", \"title\": \"URL\" } } }); }); }","title":"getSchema(attributes)"},{"location":"dev/layer-types/#addstylemap-attributes","text":"params : map - the initialized Mapbox Map object attributes - object with the layer attributes (See Layer attributes section below) returns : The return of a call to map.setStyle In MapboxGL, every map has a Style as a base layer. This method will add the layer as the Map Style, using the setStyle method of the Map object. This method will be invoked when a layer of this type is added to the map as the base layer. For example, the \"Tile Layer\" layer type sets the style as a raster layer: // ... addStyle: function(map, attributes) { return map.setStyle({ 'version': 8, 'sources': { 'raster-tiles': { 'type': 'raster', 'tiles': [attributes.layer_type_options.url], 'tileSize': 256 } }, 'layers': [{ id: attributes.layer_id, type: 'raster', source: 'raster-tiles' }] }) } Note : The attributes.layer_type_options object holds all the properties declared in the getSchema method. That's why there is a url there! (See Layer attributes section below)","title":"addStyle(map, attributes)"},{"location":"dev/layer-types/#addlayermap-attributes","text":"params : map - the initialized Mapbox Map object attributes - object with the layer attributes (See Layer attributes section below) returns : The return of a call to map.addLayer This method will add the layer to the map using the addLayer method of the Map object. This method will be invoked when a layer of this type is added to the map. For example, the \"Tile Layer\" layer type adds itself as a raster layer: // ... addLayer: function(map, attributes) { var layer = { id: attributes.layer_id, source: { type: 'raster', tiles: [attributes.layer_type_options.url], \"tileSize\": 256 }, type: 'raster' }; if ( ! attributes.visible ) { layer.layout = { visibility: 'none' }; } return map.addLayer(layer); } Note: This method must verify the value of attributes.visible to determine whether this layer should be visible when the map is initialized.","title":"addLayer(map, attributes)"},{"location":"dev/layer-types/#layer-attributes","text":"As you saw, each of the above methods gets an argument attributes as input. This argument holds all the information of the layer the user is editing or viewing. Some attributes are common to any layer types, and others that are specific to a layer type. Every layer type-specific attribute a layer has is stored under the layer_type_options attributes. So these are the keys available in the attributes object: layer_id : (integer) A unique ID that represents this layer and identify it in the database layer_name : (string) The layer name, given by the user visible : (boolean) A flag indicating whether this layer should be visible when the map initializes layer_type_options : (object) A object with all the layer type-specific attributes (those registered in the getSchema method)","title":"Layer attributes"},{"location":"dev/migration/","text":"Migration Notes on changes in DB structure from old JEO that will need to have migrations written. Geocode post_meta On old JEO, some meta_key s are prefixed by an underscore ( _ ) and others aren't: geocode_address geocode_latitude geocode_longitude _geocode_city _geocode_country geocode_viewport Let's have them all with a underscore at the beginning.","title":"Migration"},{"location":"dev/migration/#migration","text":"Notes on changes in DB structure from old JEO that will need to have migrations written.","title":"Migration"},{"location":"dev/migration/#geocode-post_meta","text":"On old JEO, some meta_key s are prefixed by an underscore ( _ ) and others aren't: geocode_address geocode_latitude geocode_longitude _geocode_city _geocode_country geocode_viewport Let's have them all with a underscore at the beginning.","title":"Geocode post_meta"}]}