{
    "docs": [
        {
            "location": "/",
            "text": "JEO Plugin\n\n\nThe JEO plugin acts as a geojournalism platform that allows news organizations, bloggers and NGOs to publish news stories as layers of information on digital maps. With JEO, creating the interaction between data layers and contextual information is intuitive and interactive.\n\n\nYou can post geotagged stories and create richly designed pages for each one of the featured stories. At the same time, by simply imputing the ids of layers hosted on MapBox, you can manage sophisticated maps without losing performance, add legends directly with HTML and set the map parameters. All direct at the WordPress dashboard.\n\n\nFeatures\n\n\n\n\nTODO\n\n\n\n\nUser tutorials\n\n\nGetting started\n\n\n\n\nConcepts\n\n\nInstalling and configuring the plugin\n\n\n\n\nLayers\n\n\n\n\nCreating layers\n\n\n\n\nMaps\n\n\n\n\nCreating maps\n\n\n\n\nPosts\n\n\n\n\nGeolocating posts\n\n\nUsing a map shortcode\n\n\nUsing a map block\n\n\nUsing an one-time map block\n\n\nUsing a map embed\n\n\n\n\nDeveloper documentation\n\n\nTutorials\n\n\n\n\nAdding new Layer Types\n\n\nGeographical Information of a post\n\n\nWriting a Geocoder\n\n\n\n\nDifferences between the old and the present JEO\n\n\n\n\nMigration",
            "title": "Home"
        },
        {
            "location": "/#jeo-plugin",
            "text": "The JEO plugin acts as a geojournalism platform that allows news organizations, bloggers and NGOs to publish news stories as layers of information on digital maps. With JEO, creating the interaction between data layers and contextual information is intuitive and interactive.  You can post geotagged stories and create richly designed pages for each one of the featured stories. At the same time, by simply imputing the ids of layers hosted on MapBox, you can manage sophisticated maps without losing performance, add legends directly with HTML and set the map parameters. All direct at the WordPress dashboard.",
            "title": "JEO Plugin"
        },
        {
            "location": "/#features",
            "text": "TODO",
            "title": "Features"
        },
        {
            "location": "/#user-tutorials",
            "text": "",
            "title": "User tutorials"
        },
        {
            "location": "/#getting-started",
            "text": "Concepts  Installing and configuring the plugin",
            "title": "Getting started"
        },
        {
            "location": "/#layers",
            "text": "Creating layers",
            "title": "Layers"
        },
        {
            "location": "/#maps",
            "text": "Creating maps",
            "title": "Maps"
        },
        {
            "location": "/#posts",
            "text": "Geolocating posts  Using a map shortcode  Using a map block  Using an one-time map block  Using a map embed",
            "title": "Posts"
        },
        {
            "location": "/#developer-documentation",
            "text": "",
            "title": "Developer documentation"
        },
        {
            "location": "/#tutorials",
            "text": "Adding new Layer Types  Geographical Information of a post  Writing a Geocoder",
            "title": "Tutorials"
        },
        {
            "location": "/#differences-between-the-old-and-the-present-jeo",
            "text": "Migration",
            "title": "Differences between the old and the present JEO"
        },
        {
            "location": "/README/",
            "text": "JEO WordPress Theme\n\n\nJEO WordPress Theme acts as a geojournalism platform which allows news organizations, bloggers and NGOs to publish news stories as layers of information on digital maps. With JEO, creating the interaction between data layers and contextual information is much more intuitive and interactive. The theme is ready for multilingual content and facilitates the publishing tasks.\n\n\nYou can post geotagged stories and create richly designed pages for each one of the featured stories. At same time, by simply imputing the ids of layers hosted on MapBox, you can manage sophisticated maps without loosing perfomance, add legends directly with HTML and set the map paramethers. All direct at the WordPress dashboard.\n\n\nJEO wants to help journalists and NGOs to improve storytelling with maps. Creating a child theme with all its functionality is easy since it contains all the necessary hooks to customize layouts and data visualization.\n\n\nGet Started\n\n\nFeatures\n\n\n\n\nLeaflet map library\n\n\nCustom tile layers\n\n\nMapBox\n maps\n\n\nCartoDB\n maps\n\n\nLayer filtering options, allowing you to mix tile layer, MapBox and CartoDB.\n\n\nGeocoding WordPress posts using OpenStreetMaps or Google Maps supporting custom post types.\n\n\nGoogle Street View support for Google Maps geocoding.\n\n\nCustomizable marker icons that can be associated to categories, custom taxonomies or posts directly.\n\n\nMap markers query integrated to posts query.\n\n\nGeoJSON API (any content /?geojson gives the geojson output). E.g.: yourwebsite.com/category/one/?geojson\n\n\nSupport \nqTranslate\n multilanguage plugin\n\n\n\n\nUser tutorials\n\n\n\n\n\n\nLayers\n\n\n\n\nCreating a layer\n\n\n\n\n\n\n\n\nMaps\n\n\n\n\nCreating maps\n\n\nEditing map layers\n\n\n\n\n\n\n\n\nPosts\n\n\n\n\nGeolocating posts\n\n\n\n\n\n\n\n\nDeveloper documentation\n\n\nTutorials\n\n\n\n\nAdding new Layer Types\n\n\nGeographical Information of a post\n\n\nWriting a Geocoder\n\n\n\n\nFeatures\n\n\n\n\nMap Shortcode\n\n\n\n\nDifferences between the old and the present JEO\n\n\n\n\nMigration",
            "title": "README"
        },
        {
            "location": "/README/#jeo-wordpress-theme",
            "text": "JEO WordPress Theme acts as a geojournalism platform which allows news organizations, bloggers and NGOs to publish news stories as layers of information on digital maps. With JEO, creating the interaction between data layers and contextual information is much more intuitive and interactive. The theme is ready for multilingual content and facilitates the publishing tasks.  You can post geotagged stories and create richly designed pages for each one of the featured stories. At same time, by simply imputing the ids of layers hosted on MapBox, you can manage sophisticated maps without loosing perfomance, add legends directly with HTML and set the map paramethers. All direct at the WordPress dashboard.  JEO wants to help journalists and NGOs to improve storytelling with maps. Creating a child theme with all its functionality is easy since it contains all the necessary hooks to customize layouts and data visualization.",
            "title": "JEO WordPress Theme"
        },
        {
            "location": "/README/#get-started",
            "text": "",
            "title": "Get Started"
        },
        {
            "location": "/README/#features",
            "text": "Leaflet map library  Custom tile layers  MapBox  maps  CartoDB  maps  Layer filtering options, allowing you to mix tile layer, MapBox and CartoDB.  Geocoding WordPress posts using OpenStreetMaps or Google Maps supporting custom post types.  Google Street View support for Google Maps geocoding.  Customizable marker icons that can be associated to categories, custom taxonomies or posts directly.  Map markers query integrated to posts query.  GeoJSON API (any content /?geojson gives the geojson output). E.g.: yourwebsite.com/category/one/?geojson  Support  qTranslate  multilanguage plugin",
            "title": "Features"
        },
        {
            "location": "/README/#user-tutorials",
            "text": "Layers   Creating a layer     Maps   Creating maps  Editing map layers     Posts   Geolocating posts",
            "title": "User tutorials"
        },
        {
            "location": "/README/#developer-documentation",
            "text": "",
            "title": "Developer documentation"
        },
        {
            "location": "/README/#tutorials",
            "text": "Adding new Layer Types  Geographical Information of a post  Writing a Geocoder",
            "title": "Tutorials"
        },
        {
            "location": "/README/#features_1",
            "text": "Map Shortcode",
            "title": "Features"
        },
        {
            "location": "/README/#differences-between-the-old-and-the-present-jeo",
            "text": "Migration",
            "title": "Differences between the old and the present JEO"
        },
        {
            "location": "/concepts/",
            "text": "Concepts\n\n\nLayer\n\n\nA layer is the basic building block for map interactions. Each layer can have its legends, attributions, etc.\n\n\nJEO supports four layer types out-of-the-box:\n\n\n\n\nMapbox styles\n\n\nMapbox tilesets\n\n\nMapbox vector tiles\n (MVTs)\n\n\nTileLayers\n\n\n\n\nMap\n\n\nA map is composed of one or more layers and can be associated with related geolocated posts, that'll be rendered as markers on the map.\n\n\nA map post is used for reusable map interactions, that can be embedded in any post as a \nshortcode\n or \nGutenberg block\n.\n\n\nOne-time Map\n\n\nInstead of creating a reusable map any time you want to add a map interaction, you can create and configure an inline single-use map via the \nOne-Time Map block\n for Gutenberg.",
            "title": "Concepts"
        },
        {
            "location": "/concepts/#concepts",
            "text": "",
            "title": "Concepts"
        },
        {
            "location": "/concepts/#layer",
            "text": "A layer is the basic building block for map interactions. Each layer can have its legends, attributions, etc.  JEO supports four layer types out-of-the-box:   Mapbox styles  Mapbox tilesets  Mapbox vector tiles  (MVTs)  TileLayers",
            "title": "Layer"
        },
        {
            "location": "/concepts/#map",
            "text": "A map is composed of one or more layers and can be associated with related geolocated posts, that'll be rendered as markers on the map.  A map post is used for reusable map interactions, that can be embedded in any post as a  shortcode  or  Gutenberg block .",
            "title": "Map"
        },
        {
            "location": "/concepts/#one-time-map",
            "text": "Instead of creating a reusable map any time you want to add a map interaction, you can create and configure an inline single-use map via the  One-Time Map block  for Gutenberg.",
            "title": "One-time Map"
        },
        {
            "location": "/geolocating-posts/",
            "text": "Geolocating posts\n\n\nWhen editing a post, JEO will add an extra panel to the sidebar: \nGeolocation\n. Clicking on \nGeolocate this post\n, a popup containing two tabs (\nMap\n and \nList\n) will then be displayed.\n\n\n\n\nNew points can be added to the post by clicking on \nAdd new point\n button. You can search for a specific location in the search bar.\n\n\nIt's also possible to choose the relevance of each point, which is useful when you have more than one point.\n\n\nMap tab\n\n\nThe Map tab allows you to move a point by dragging its marker and dropping it on the new location.\n\n\nList tab\n\n\nThe List tab allows you to visualize all the created points and delete a specific point.",
            "title": "Geolocating posts"
        },
        {
            "location": "/geolocating-posts/#geolocating-posts",
            "text": "When editing a post, JEO will add an extra panel to the sidebar:  Geolocation . Clicking on  Geolocate this post , a popup containing two tabs ( Map  and  List ) will then be displayed.   New points can be added to the post by clicking on  Add new point  button. You can search for a specific location in the search bar.  It's also possible to choose the relevance of each point, which is useful when you have more than one point.",
            "title": "Geolocating posts"
        },
        {
            "location": "/geolocating-posts/#map-tab",
            "text": "The Map tab allows you to move a point by dragging its marker and dropping it on the new location.",
            "title": "Map tab"
        },
        {
            "location": "/geolocating-posts/#list-tab",
            "text": "The List tab allows you to visualize all the created points and delete a specific point.",
            "title": "List tab"
        },
        {
            "location": "/getting-started/",
            "text": "Getting started\n\n\nInstalling\n\n\nThe JEO plugin is currently pending approval to \nWordPress Plugins\n store.\n\n\nAfter activating the plugin, new items will appear on the WordPress dashboard: the \nMaps\n and \nLayers\n post types, and the JEO settings page.\n\n\nConfiguring the plugin\n\n\nAt the JEO settings page, you can configure:\n\n\n\n\nthe default latitude, longitude, and zoom for your maps;\n\n\nthe \nMapbox API key\n that'll be used by the plugin;\n\n\nthe geocoder that'll be used by the plugin -- currently only \nNominatim\n is available.",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#getting-started",
            "text": "",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#installing",
            "text": "The JEO plugin is currently pending approval to  WordPress Plugins  store.  After activating the plugin, new items will appear on the WordPress dashboard: the  Maps  and  Layers  post types, and the JEO settings page.",
            "title": "Installing"
        },
        {
            "location": "/getting-started/#configuring-the-plugin",
            "text": "At the JEO settings page, you can configure:   the default latitude, longitude, and zoom for your maps;  the  Mapbox API key  that'll be used by the plugin;  the geocoder that'll be used by the plugin -- currently only  Nominatim  is available.",
            "title": "Configuring the plugin"
        },
        {
            "location": "/layer-post/",
            "text": "Creating a layer\n\n\nOne of the custom post types that JEO plugin provides is \nLayer\n. Is in the layer where you will be able to add legend and color to your map. A map may contain one or more layers.\n\n\n\n\nEntering the Layer post editor, you'll see a preview of the current layer (or a default layer if the current layer haven't been edited yet) and two sidebar panels: \nSettings\n and \nLegend\n.\n\n\n\n\nLayer settings\n\n\nOn the \nLayer settings\n panel, you can change the layer type (mapbox, tilelayer, mvt or mapbox-tileset). You can also inform an address, following the standard \nusername/id\n, to compose your map style. If an access token is needed for this layer, you can put it into the \nAcess token\n input.\n\n\n\n\nThere's also an \nEdit interactions\n button. Here, you can add popups to your layer when specific actions (clicking or hovering the mouse) are made (e.g: Clicking on a building and displaying its height)\n\n\n\n\nLayer legend\n\n\nOn the \nLayer legend\n panel, you can add legends to your layer (barscale, simple-color, icons or circles and colorize them.\n\n\nTODO: layer legend",
            "title": "Layer post"
        },
        {
            "location": "/layer-post/#creating-a-layer",
            "text": "One of the custom post types that JEO plugin provides is  Layer . Is in the layer where you will be able to add legend and color to your map. A map may contain one or more layers.   Entering the Layer post editor, you'll see a preview of the current layer (or a default layer if the current layer haven't been edited yet) and two sidebar panels:  Settings  and  Legend .",
            "title": "Creating a layer"
        },
        {
            "location": "/layer-post/#layer-settings",
            "text": "On the  Layer settings  panel, you can change the layer type (mapbox, tilelayer, mvt or mapbox-tileset). You can also inform an address, following the standard  username/id , to compose your map style. If an access token is needed for this layer, you can put it into the  Acess token  input.   There's also an  Edit interactions  button. Here, you can add popups to your layer when specific actions (clicking or hovering the mouse) are made (e.g: Clicking on a building and displaying its height)",
            "title": "Layer settings"
        },
        {
            "location": "/layer-post/#layer-legend",
            "text": "On the  Layer legend  panel, you can add legends to your layer (barscale, simple-color, icons or circles and colorize them.  TODO: layer legend",
            "title": "Layer legend"
        },
        {
            "location": "/map-block/",
            "text": "Map block\n\n\nTODO",
            "title": "Map block"
        },
        {
            "location": "/map-block/#map-block",
            "text": "TODO",
            "title": "Map block"
        },
        {
            "location": "/map-embed/",
            "text": "Embedding a map\n\n\nTODO",
            "title": "Map embed"
        },
        {
            "location": "/map-embed/#embedding-a-map",
            "text": "TODO",
            "title": "Embedding a map"
        },
        {
            "location": "/map-post/",
            "text": "Creating maps\n\n\nOne of the custom post types that JEO plugin provides is \nMap\n.\n\n\n\n\nEntering the Map post editor, you'll see a preview of the current map (or a default map, if no layers are selected) and three sidebar panels: \nMap settings\n, \nMap layers\n, and \nRelated posts\n.\n\n\n\n\nMap settings\n\n\nOn the \nMap settings\n panel, you can change the initial center of the map setting a latitude and longitude. You can also change the default zoom settings.\n\n\n\n\nMap layers\n\n\nOn the \nMap layers\n panel, you can visualize all the layers which are part of the map.\n\n\n\n\nClicking on the \nEdit layers settings\n, a popup will open. There, you can add, remove and rearrange layers, define their types and whether its legends will be shown on the map.\n\n\nA legend can be of one of these types:\n\n\n\n\nFixed\n: the layer will always be shown in the map;\n\n\nSwitchable\n: the layer visibility can be toggled on and off;\n\n\nSwappable\n: only one swappable layer can be visible at a time.\n\n\n\n\n\n\nRelated posts\n\n\nOn the \nRelated posts\n panel, you can set which geolocated posts will be used as markers on the post. You can filter the posts by categories, tags, dates interval or, for advanced uses, meta queries using WordPress \npost_meta\n.",
            "title": "Map post"
        },
        {
            "location": "/map-post/#creating-maps",
            "text": "One of the custom post types that JEO plugin provides is  Map .   Entering the Map post editor, you'll see a preview of the current map (or a default map, if no layers are selected) and three sidebar panels:  Map settings ,  Map layers , and  Related posts .",
            "title": "Creating maps"
        },
        {
            "location": "/map-post/#map-settings",
            "text": "On the  Map settings  panel, you can change the initial center of the map setting a latitude and longitude. You can also change the default zoom settings.",
            "title": "Map settings"
        },
        {
            "location": "/map-post/#map-layers",
            "text": "On the  Map layers  panel, you can visualize all the layers which are part of the map.   Clicking on the  Edit layers settings , a popup will open. There, you can add, remove and rearrange layers, define their types and whether its legends will be shown on the map.  A legend can be of one of these types:   Fixed : the layer will always be shown in the map;  Switchable : the layer visibility can be toggled on and off;  Swappable : only one swappable layer can be visible at a time.",
            "title": "Map layers"
        },
        {
            "location": "/map-post/#related-posts",
            "text": "On the  Related posts  panel, you can set which geolocated posts will be used as markers on the post. You can filter the posts by categories, tags, dates interval or, for advanced uses, meta queries using WordPress  post_meta .",
            "title": "Related posts"
        },
        {
            "location": "/map-shortcode/",
            "text": "Map shortcode\n\n\nA map can be inserted on any page or post using the \njeo-map\n shortcode.\n\n\nThe shortcode accepts three attributes:\n\n\n\n\nmap_id\n (required): The ID of the map you want to insert;\n\n\nwidth\n (optional): The width of the map. It'll default to 600px or whatever the active theme defines for the 'div.jeomap' CSS class;\n\n\nheight\n (optional): The height of the map. Will default to 600px or whatever the active theme defines for the 'div.jeomap' CSS class.\n\n\n\n\nExamples:\n\n\n[jeo-map map_id=99]\n\n\n\n\nYou have to inform at least the ID of the Map you want to insert. By default, it will be inserted with a size of 600\u00d7600px (or whatever the active theme defines), but you can also change it:\n\n\n[jeo-map map_id=99 width=\"800px\" height=\"800px\"]",
            "title": "Map shortcode"
        },
        {
            "location": "/map-shortcode/#map-shortcode",
            "text": "A map can be inserted on any page or post using the  jeo-map  shortcode.  The shortcode accepts three attributes:   map_id  (required): The ID of the map you want to insert;  width  (optional): The width of the map. It'll default to 600px or whatever the active theme defines for the 'div.jeomap' CSS class;  height  (optional): The height of the map. Will default to 600px or whatever the active theme defines for the 'div.jeomap' CSS class.   Examples:  [jeo-map map_id=99]  You have to inform at least the ID of the Map you want to insert. By default, it will be inserted with a size of 600\u00d7600px (or whatever the active theme defines), but you can also change it:  [jeo-map map_id=99 width=\"800px\" height=\"800px\"]",
            "title": "Map shortcode"
        },
        {
            "location": "/one-time-map-block/",
            "text": "One-time map block\n\n\nTODO",
            "title": "One time map block"
        },
        {
            "location": "/one-time-map-block/#one-time-map-block",
            "text": "TODO",
            "title": "One-time map block"
        },
        {
            "location": "/dev/geo-information/",
            "text": "Geographical Information of a post\n\n\nEach post can be related to one or more points on the map.\n\n\nFor each point, JEO collects geographical information such as city and country names. For complete information on this, see \nGeocoders\n.\n\n\nHow geographical information is stored\n\n\nEach related point is stored as one entry of the \n_related_point\n metadata key. Each entry is an object with all the information retrieved by the geocoder.\n\n\nHere is an example of two entries related to the same post, that could be get using:\n\n\nget_post_meta( $post_id, '_related_point' );\n\n\n\n\n'_related_point' => [\n    'relevance' => 'primary',\n    '_geocode_lat' => '-23,54659435',\n    '_geocode_lon' => '-46,644533061712',\n    '_geocode_full_address' => 'Edif\u00edcio Copan, Rua Ara\u00fajo, Vila Buarque, Rep\u00fablica, S\u00e3o Paulo, Regi\u00e3o Imediata de S\u00e3o Paulo, Regi\u00e3o Metropolitana de S\u00e3o Paulo, Regi\u00e3o Intermedi\u00e1ria de S\u00e3o Paulo, S\u00e3o Paulo, Regi\u00e3o Sudeste, 01046-010, Brasil',\n    '_geocode_country' => 'Brasil',\n    '_geocode_country_code' => '',\n    '_geocode_city' => 'S\u00e3o Paulo',\n    '_geocode_region_level_2' => 'S\u00e3o Paulo',\n    '_geocode_region_level_3' => 'Regi\u00e3o Intermedi\u00e1ria de S\u00e3o Paulo',\n    '_geocode_city_level_1' => 'Vila Buarque',\n],\n'_related_point' => [\n    'relevance' => 'secondary',\n    '_geocode_lat' => '-23,183525102463',\n    '_geocode_lon' => '-46,898231506348',\n    '_geocode_full_address' => 'Rua Jorge Gebran, Parque do Col\u00e9gio, Ch\u00e1cara Urbana, Jundia\u00ed, Regi\u00e3o Imediata de Jundia\u00ed, Regi\u00e3o Intermedi\u00e1ria de Campinas, S\u00e3o Paulo, Regi\u00e3o Sudeste, 13209-090, Brasil',\n    '_geocode_country' => 'Brasil',\n    '_geocode_country_code' => '',\n    '_geocode_city' => 'Jundia\u00ed',\n    '_geocode_region_level_2' => 'S\u00e3o Paulo',\n    '_geocode_region_level_3' => 'Regi\u00e3o Intermedi\u00e1ria de Campinas',\n    '_geocode_city_level_1' => 'Parque do Col\u00e9gio',\n]\n\n\n\n\nHow to search for posts by geoinformation? (indexes)\n\n\nWhen you save geographical information of the points, JEO also creates other metadata that will allow developers to query posts by specific geographical information.\n\n\nSince each point is stored as a serialized data in the database, this would not allow us to filter posts by \ncountry_code\n for example. That's why we create indexes.\n\n\nFor the example above, this post would also have one individual metadata entry for each information, like this:\n\n\n[\n    '_geocode_lat_p' => '-23,54659435',\n    '_geocode_lon_p' => '-46,644533061712',\n    '_geocode_country_p' => 'Brasil',\n    '_geocode_country_code_p' => '',\n    '_geocode_city_p' => 'S\u00e3o Paulo',\n    '_geocode_region_level_2_p' => 'S\u00e3o Paulo',\n    '_geocode_region_level_3_p' => 'Regi\u00e3o Intermedi\u00e1ria de S\u00e3o Paulo',\n    '_geocode_city_level_1_p' => 'Vila Buarque',\n    '_geocode_lat_s' => '-23,183525102463',\n    '_geocode_lon_s' => '-46,898231506348',\n    '_geocode_country_s' => 'Brasil',\n    '_geocode_country_code_s' => '',\n    '_geocode_city_s' => 'Jundia\u00ed',\n    '_geocode_region_level_2_s' => 'S\u00e3o Paulo',\n    '_geocode_region_level_3_s' => 'Regi\u00e3o Intermedi\u00e1ria de Campinas',\n    '_geocode_city_level_1_s' => 'Parque do Col\u00e9gio',\n]\n\n\n\n\nNote: \n_s\n and \n_p\n suffixes indicate if the relevance of that information is primary or secondary.\n\n\nNote 2: Full addresses are not indexed\n\n\nNow we have all the information as individual metadata and this allows me to query by them, however, the pairs are disconnected (if I had more than one primary point, it would be impossible to know what are the latitude-longitude pairs. That's why the information we actually use is the serialized object).\n\n\nFetching posts by geoinformation\n\n\nGive me all the posts that have primary points with the country code \n'BR'\n:\n\n\n$posts = new WP_Query([\n    'meta_query' => [\n        [\n            'key' => '_geocode_country_code_p',\n            'value' => 'BR'\n        ]\n    ]\n]);\n\n\n\n\nGive me all the posts whose city is \n'Manaus'\n:\n\n\n$posts = new WP_Query([\n    'meta_query' => [\n        [\n            'key' => '_geocode_city_s',\n            'value' => 'Manaus'\n        ],\n        [\n            'key' => '_geocode_city_p',\n            'value' => 'Manaus'\n        ],\n        'relation' => 'OR'\n    ]\n]);",
            "title": "Geo information"
        },
        {
            "location": "/dev/geo-information/#geographical-information-of-a-post",
            "text": "Each post can be related to one or more points on the map.  For each point, JEO collects geographical information such as city and country names. For complete information on this, see  Geocoders .",
            "title": "Geographical Information of a post"
        },
        {
            "location": "/dev/geo-information/#how-geographical-information-is-stored",
            "text": "Each related point is stored as one entry of the  _related_point  metadata key. Each entry is an object with all the information retrieved by the geocoder.  Here is an example of two entries related to the same post, that could be get using:  get_post_meta( $post_id, '_related_point' );  '_related_point' => [\n    'relevance' => 'primary',\n    '_geocode_lat' => '-23,54659435',\n    '_geocode_lon' => '-46,644533061712',\n    '_geocode_full_address' => 'Edif\u00edcio Copan, Rua Ara\u00fajo, Vila Buarque, Rep\u00fablica, S\u00e3o Paulo, Regi\u00e3o Imediata de S\u00e3o Paulo, Regi\u00e3o Metropolitana de S\u00e3o Paulo, Regi\u00e3o Intermedi\u00e1ria de S\u00e3o Paulo, S\u00e3o Paulo, Regi\u00e3o Sudeste, 01046-010, Brasil',\n    '_geocode_country' => 'Brasil',\n    '_geocode_country_code' => '',\n    '_geocode_city' => 'S\u00e3o Paulo',\n    '_geocode_region_level_2' => 'S\u00e3o Paulo',\n    '_geocode_region_level_3' => 'Regi\u00e3o Intermedi\u00e1ria de S\u00e3o Paulo',\n    '_geocode_city_level_1' => 'Vila Buarque',\n],\n'_related_point' => [\n    'relevance' => 'secondary',\n    '_geocode_lat' => '-23,183525102463',\n    '_geocode_lon' => '-46,898231506348',\n    '_geocode_full_address' => 'Rua Jorge Gebran, Parque do Col\u00e9gio, Ch\u00e1cara Urbana, Jundia\u00ed, Regi\u00e3o Imediata de Jundia\u00ed, Regi\u00e3o Intermedi\u00e1ria de Campinas, S\u00e3o Paulo, Regi\u00e3o Sudeste, 13209-090, Brasil',\n    '_geocode_country' => 'Brasil',\n    '_geocode_country_code' => '',\n    '_geocode_city' => 'Jundia\u00ed',\n    '_geocode_region_level_2' => 'S\u00e3o Paulo',\n    '_geocode_region_level_3' => 'Regi\u00e3o Intermedi\u00e1ria de Campinas',\n    '_geocode_city_level_1' => 'Parque do Col\u00e9gio',\n]",
            "title": "How geographical information is stored"
        },
        {
            "location": "/dev/geo-information/#how-to-search-for-posts-by-geoinformation-indexes",
            "text": "When you save geographical information of the points, JEO also creates other metadata that will allow developers to query posts by specific geographical information.  Since each point is stored as a serialized data in the database, this would not allow us to filter posts by  country_code  for example. That's why we create indexes.  For the example above, this post would also have one individual metadata entry for each information, like this:  [\n    '_geocode_lat_p' => '-23,54659435',\n    '_geocode_lon_p' => '-46,644533061712',\n    '_geocode_country_p' => 'Brasil',\n    '_geocode_country_code_p' => '',\n    '_geocode_city_p' => 'S\u00e3o Paulo',\n    '_geocode_region_level_2_p' => 'S\u00e3o Paulo',\n    '_geocode_region_level_3_p' => 'Regi\u00e3o Intermedi\u00e1ria de S\u00e3o Paulo',\n    '_geocode_city_level_1_p' => 'Vila Buarque',\n    '_geocode_lat_s' => '-23,183525102463',\n    '_geocode_lon_s' => '-46,898231506348',\n    '_geocode_country_s' => 'Brasil',\n    '_geocode_country_code_s' => '',\n    '_geocode_city_s' => 'Jundia\u00ed',\n    '_geocode_region_level_2_s' => 'S\u00e3o Paulo',\n    '_geocode_region_level_3_s' => 'Regi\u00e3o Intermedi\u00e1ria de Campinas',\n    '_geocode_city_level_1_s' => 'Parque do Col\u00e9gio',\n]  Note:  _s  and  _p  suffixes indicate if the relevance of that information is primary or secondary.  Note 2: Full addresses are not indexed  Now we have all the information as individual metadata and this allows me to query by them, however, the pairs are disconnected (if I had more than one primary point, it would be impossible to know what are the latitude-longitude pairs. That's why the information we actually use is the serialized object).",
            "title": "How to search for posts by geoinformation? (indexes)"
        },
        {
            "location": "/dev/geo-information/#fetching-posts-by-geoinformation",
            "text": "Give me all the posts that have primary points with the country code  'BR' :  $posts = new WP_Query([\n    'meta_query' => [\n        [\n            'key' => '_geocode_country_code_p',\n            'value' => 'BR'\n        ]\n    ]\n]);  Give me all the posts whose city is  'Manaus' :  $posts = new WP_Query([\n    'meta_query' => [\n        [\n            'key' => '_geocode_city_s',\n            'value' => 'Manaus'\n        ],\n        [\n            'key' => '_geocode_city_p',\n            'value' => 'Manaus'\n        ],\n        'relation' => 'OR'\n    ]\n]);",
            "title": "Fetching posts by geoinformation"
        },
        {
            "location": "/dev/geocoders/",
            "text": "Writing a Geocoder\n\n\nA Geocoder is a service that finds geographical coordinates from a search by address information. It's also able to get address details based on the geographical coordinates, which is called Reverse Geocoding.\n\n\nJEO needs a geocoder service in a few situations, such as when users indicate to where on a map a story (posts) is related.\n\n\nJEO comes with two native geocoder services users can choose from: Nominatim and Google. But new services can easily be added by plugins. This page documents how to do this.\n\n\nRegistering a Geocoder\n\n\nHook a function to the \njeo_register_geocoders\n action and call the register with the following code:\n\n\nadd_action('jeo_register_geocoders', function($geocoders) {\n\n    $geocoders->register_geocoder([\n        'slug' => 'my-geocoder',\n        'name' => 'My Geocoder',\n        'description' => __('My Geocoder description', 'my-textdomain'),\n        'class_name' => 'MyGeocoderClass'\n    ]);\n\n});\n\n\n\n\nThis will tell JEO that there is a new Geocoder service available and give some information about it.\n\n\n\n\nName and description will be used in the Administration panel so the admin can recognize and choose from the available Geocoders which one is to be used.\n\n\nslug needs to be a unique identifier for the geocoder\n\n\nclass_name is the name of the Geocoder class\n\n\n\n\nCreating the Geocoder class\n\n\nNow we need to create the geocoder class. This will be a class that extends \n\\Jeo\\Geocoder\n and implement some methods that do the actual geocoding.\n\n\nInside the same hook, declare the class and two required methods:\n\n\n\n\ngeocode($search_string)\n The method that receives the search string, does the request to the geocoder servers and returns the coordinates and address details;\n\n\nreverse_geocode($lat, $lon)\n The method that receives latitude and longitude, requests the geocoder server, and returns the full location details in the same format as the \ngeocode\n method does.\n\n\n\n\nWhile \ngeocode()\n returns an array of search results, \nreverse_geocode()\n returns only one result.\n\n\nEach result is an array that must have only the keys expected by the JEO plugin, so each Geocoder must find the best correspondence between each field and the fields expected by JEO.\n\n\nNote: Only \nlat\n and \nlon\n are required.\n\n\nSample response with all accepted fields:\n\n\n[\n        [\n            'lat' => '',\n            'lon' => '',\n            'full_address' => '',\n            'country' => '',\n            'country_code' => '',\n            'region_level_1' => '',\n            'region_level_2' => '', // State goes here\n            'region_level_3' => '',\n            'city' => '',\n            'city_level_1' => '',\n        ]\n]\n\n\n\n\nHere is a simple example:\n\n\nadd_action('jeo_register_geocoders', function($geocoders) {\n\n    $geocoders->register_geocoder([\n        'slug' => 'my-geocoder',\n        'name' => 'My Geocoder',\n        'description' => __('My Geocoder description', 'my-textdomain'),\n        'class_name' => 'MyGeocoderClass'\n    ]);\n\n    class MyGeocoderClass extends \\Jeo\\Geocoder {\n\n        public function geocode($search_string) {\n\n            $params = [\n                'q' => $search_string,\n                'format' => 'json',\n                'addressdetails' => 1\n            ];\n\n            $r = wp_remote_get( add_query_arg($params, 'https://my-geocoder-server.org/search') );\n\n            $data = wp_remote_retrieve_body( $r );\n\n            $data = \\json_decode($data);\n            $response = [];\n\n            if (\\is_array($data)) {\n\n                foreach ($data as $match) {\n                    $r = $this->format_response_item( (array) $match );\n                    if ($r) $response[] = $r;\n                }\n\n            }\n\n            return $response;\n\n        }\n\n        public function reverse_geocode($lat, $lon) {\n\n            $params = [\n                'lat' => $lat,\n                'lon' => $lon,\n                'format' => 'json',\n                'addressdetails' => 1\n            ];\n\n            $r = wp_remote_get( add_query_arg($params, 'https://my-geocoder-server.org/reverse') );\n\n            $data = wp_remote_retrieve_body( $r );\n\n            $data = \\json_decode($data);\n\n            return $this->format_response_item( (array) $data );\n\n        }\n\n        private function format_response_item($match) {\n\n            $response = [\n                'lat' => $match['lat'],\n                'lon' => $match['lon'],\n                'full_address' => $match['display_name'],\n                'country' => $match['country'],\n                'country_code' => $match['country_code'],\n                'region_level_1' => $match['region_level_1'],\n                'region_level_2' => $match['region_level_2'], // State goes here\n                'region_level_3' => $match['region_level_3'],\n                'city' => $match['city'],\n                'city_level_1' => $match['city_level_1'],\n            ];\n\n            return $response;\n\n        }\n\n    }\n\n});\n\n\n\n\nAnd that's it! Your new Geocoder is ready!\n\n\nAdding additional Settings to the Geocoder\n\n\nSome geocoder services might need or offer additional settings. Some might require the user to enter its API key, others might let the users restrict the search to a specific country to get better results when searching.\n\n\nYou can also easily add new settings to your Geocoder that will automatically be presented to the user on the Settings page.\n\n\nDeclare a method \nget_settings()\n in your class that will return an array of all the settings your Geocoder accepts.\n\n\nEach setting is described by an array with the following keys:\n\n\n\n\nslug\n: a slug for your option. You don't have to worry about naming conflicts, it will be stored inside your geocoders options;\n\n\nname\n: a human-readable name;\n\n\ndescription\n: an explanation to the user of what this setting is.\n\n\n\n\nLet's see an example only with the relevant code:\n\n\nadd_action('jeo_register_geocoders', function($geocoders) {\n\n    // ...\n    class MyGeocoderClass extends \\Jeo\\Geocoder {\n\n        // ...\n\n        public function get_settings() {\n\n            // Note it is an array of arrays\n            return [\n                [\n                    'slug' => 'api_key',\n                    'name' => __('API Key', 'my-text-domain'),\n                    'description' => __('Enter the API key you can get visiting your panel at my-gecoder.org/panel', 'my-text-domain')\n                ]\n            ];\n\n        }\n\n    }\n\n});\n\n\n\n\nAnd this is what you will see in the admin panel:\n\n\n\n\nAccessing Settings values\n\n\nNow that you have registered a setting and the user can change its value in the admin panel, you can use it in your geocoder.\n\n\nTo get its value, simply call \n$this->get_option($option_name)\n.\n\n\nExample:\n\n\n// ...\n\n        // ...\n\n        public function geocode($search_string) {\n\n            $params = [\n                'q' => $search_string,\n                'format' => 'json',\n                'addressdetails' => 1,\n                'api_key' => $this->get_option('api_key')\n            ];\n\n            // ...\n\n            return $response;\n\n        }\n\n// ...\n\n\n\n\nDeclaring default values\n\n\nYou can also add the \nget_default_options()\n method to your class to set default values for each setting. This is optional and is done like this:\n\n\nadd_action('jeo_register_geocoders', function($geocoders) {\n\n    // ...\n    class MyGeocoderClass extends \\Jeo\\Geocoder {\n\n        // ...\n\n        public function get_default_options() {\n\n            return [\n                'api_key' => 'sand-box-api-key' // the key must match the slug of the setting registered in get_settings()\n            ];\n\n        }\n\n    }\n\n});\n\n\n\n\nAdvanced: Even further settings customization\n\n\nIf your geocoder needs some special settings that a simple text input won't handle, there is yet another method you can declare to add arbitrary HTML code to the Settings page.\n\n\nsettings_footer($settings)\n must echo HTML code that will be rendered at the end of your Geocoder settings page.\n\n\nIt received the \n$settings\n object, which is an instance of \n\\Jeo\\Settings\n and have some helpers you can use.\n\n\nYou only need to print form fields with the right names and JEO will take care of saving them for you.\n\n\nTo get the right field name use \n$settings->get_geocoder_option_field_name($name)\n.\n\n\nExample:\n\n\n// ...\n\n        // ...\n\n        public function settings_footer($settings) {\n\n            ?>\n            <p><strong>My Select option</strong></p>\n\n            <select name=\"<?php echo $settings->get_geocoder_option_field_name('new_option'); ?>\">\n                <option value=\"yes\" <?php selected( $this->get_option('new_option'), 'yes' ); ?> >\n                    Yes\n                </select>\n                <option value=\"no\" <?php selected( $this->get_option('new_option'), 'no' ); ?> >\n                    No\n                </select>\n            </select>\n            <?php\n\n        }\n\n// ...\n\n\n\n\nNote: \nselected()\n is a native WordPress function. See the \nofficial documentation",
            "title": "Geocoders"
        },
        {
            "location": "/dev/geocoders/#writing-a-geocoder",
            "text": "A Geocoder is a service that finds geographical coordinates from a search by address information. It's also able to get address details based on the geographical coordinates, which is called Reverse Geocoding.  JEO needs a geocoder service in a few situations, such as when users indicate to where on a map a story (posts) is related.  JEO comes with two native geocoder services users can choose from: Nominatim and Google. But new services can easily be added by plugins. This page documents how to do this.",
            "title": "Writing a Geocoder"
        },
        {
            "location": "/dev/geocoders/#registering-a-geocoder",
            "text": "Hook a function to the  jeo_register_geocoders  action and call the register with the following code:  add_action('jeo_register_geocoders', function($geocoders) {\n\n    $geocoders->register_geocoder([\n        'slug' => 'my-geocoder',\n        'name' => 'My Geocoder',\n        'description' => __('My Geocoder description', 'my-textdomain'),\n        'class_name' => 'MyGeocoderClass'\n    ]);\n\n});  This will tell JEO that there is a new Geocoder service available and give some information about it.   Name and description will be used in the Administration panel so the admin can recognize and choose from the available Geocoders which one is to be used.  slug needs to be a unique identifier for the geocoder  class_name is the name of the Geocoder class",
            "title": "Registering a Geocoder"
        },
        {
            "location": "/dev/geocoders/#creating-the-geocoder-class",
            "text": "Now we need to create the geocoder class. This will be a class that extends  \\Jeo\\Geocoder  and implement some methods that do the actual geocoding.  Inside the same hook, declare the class and two required methods:   geocode($search_string)  The method that receives the search string, does the request to the geocoder servers and returns the coordinates and address details;  reverse_geocode($lat, $lon)  The method that receives latitude and longitude, requests the geocoder server, and returns the full location details in the same format as the  geocode  method does.   While  geocode()  returns an array of search results,  reverse_geocode()  returns only one result.  Each result is an array that must have only the keys expected by the JEO plugin, so each Geocoder must find the best correspondence between each field and the fields expected by JEO.  Note: Only  lat  and  lon  are required.  Sample response with all accepted fields:  [\n        [\n            'lat' => '',\n            'lon' => '',\n            'full_address' => '',\n            'country' => '',\n            'country_code' => '',\n            'region_level_1' => '',\n            'region_level_2' => '', // State goes here\n            'region_level_3' => '',\n            'city' => '',\n            'city_level_1' => '',\n        ]\n]  Here is a simple example:  add_action('jeo_register_geocoders', function($geocoders) {\n\n    $geocoders->register_geocoder([\n        'slug' => 'my-geocoder',\n        'name' => 'My Geocoder',\n        'description' => __('My Geocoder description', 'my-textdomain'),\n        'class_name' => 'MyGeocoderClass'\n    ]);\n\n    class MyGeocoderClass extends \\Jeo\\Geocoder {\n\n        public function geocode($search_string) {\n\n            $params = [\n                'q' => $search_string,\n                'format' => 'json',\n                'addressdetails' => 1\n            ];\n\n            $r = wp_remote_get( add_query_arg($params, 'https://my-geocoder-server.org/search') );\n\n            $data = wp_remote_retrieve_body( $r );\n\n            $data = \\json_decode($data);\n            $response = [];\n\n            if (\\is_array($data)) {\n\n                foreach ($data as $match) {\n                    $r = $this->format_response_item( (array) $match );\n                    if ($r) $response[] = $r;\n                }\n\n            }\n\n            return $response;\n\n        }\n\n        public function reverse_geocode($lat, $lon) {\n\n            $params = [\n                'lat' => $lat,\n                'lon' => $lon,\n                'format' => 'json',\n                'addressdetails' => 1\n            ];\n\n            $r = wp_remote_get( add_query_arg($params, 'https://my-geocoder-server.org/reverse') );\n\n            $data = wp_remote_retrieve_body( $r );\n\n            $data = \\json_decode($data);\n\n            return $this->format_response_item( (array) $data );\n\n        }\n\n        private function format_response_item($match) {\n\n            $response = [\n                'lat' => $match['lat'],\n                'lon' => $match['lon'],\n                'full_address' => $match['display_name'],\n                'country' => $match['country'],\n                'country_code' => $match['country_code'],\n                'region_level_1' => $match['region_level_1'],\n                'region_level_2' => $match['region_level_2'], // State goes here\n                'region_level_3' => $match['region_level_3'],\n                'city' => $match['city'],\n                'city_level_1' => $match['city_level_1'],\n            ];\n\n            return $response;\n\n        }\n\n    }\n\n});  And that's it! Your new Geocoder is ready!",
            "title": "Creating the Geocoder class"
        },
        {
            "location": "/dev/geocoders/#adding-additional-settings-to-the-geocoder",
            "text": "Some geocoder services might need or offer additional settings. Some might require the user to enter its API key, others might let the users restrict the search to a specific country to get better results when searching.  You can also easily add new settings to your Geocoder that will automatically be presented to the user on the Settings page.  Declare a method  get_settings()  in your class that will return an array of all the settings your Geocoder accepts.  Each setting is described by an array with the following keys:   slug : a slug for your option. You don't have to worry about naming conflicts, it will be stored inside your geocoders options;  name : a human-readable name;  description : an explanation to the user of what this setting is.   Let's see an example only with the relevant code:  add_action('jeo_register_geocoders', function($geocoders) {\n\n    // ...\n    class MyGeocoderClass extends \\Jeo\\Geocoder {\n\n        // ...\n\n        public function get_settings() {\n\n            // Note it is an array of arrays\n            return [\n                [\n                    'slug' => 'api_key',\n                    'name' => __('API Key', 'my-text-domain'),\n                    'description' => __('Enter the API key you can get visiting your panel at my-gecoder.org/panel', 'my-text-domain')\n                ]\n            ];\n\n        }\n\n    }\n\n});  And this is what you will see in the admin panel:",
            "title": "Adding additional Settings to the Geocoder"
        },
        {
            "location": "/dev/geocoders/#accessing-settings-values",
            "text": "Now that you have registered a setting and the user can change its value in the admin panel, you can use it in your geocoder.  To get its value, simply call  $this->get_option($option_name) .  Example:  // ...\n\n        // ...\n\n        public function geocode($search_string) {\n\n            $params = [\n                'q' => $search_string,\n                'format' => 'json',\n                'addressdetails' => 1,\n                'api_key' => $this->get_option('api_key')\n            ];\n\n            // ...\n\n            return $response;\n\n        }\n\n// ...",
            "title": "Accessing Settings values"
        },
        {
            "location": "/dev/geocoders/#declaring-default-values",
            "text": "You can also add the  get_default_options()  method to your class to set default values for each setting. This is optional and is done like this:  add_action('jeo_register_geocoders', function($geocoders) {\n\n    // ...\n    class MyGeocoderClass extends \\Jeo\\Geocoder {\n\n        // ...\n\n        public function get_default_options() {\n\n            return [\n                'api_key' => 'sand-box-api-key' // the key must match the slug of the setting registered in get_settings()\n            ];\n\n        }\n\n    }\n\n});",
            "title": "Declaring default values"
        },
        {
            "location": "/dev/geocoders/#advanced-even-further-settings-customization",
            "text": "If your geocoder needs some special settings that a simple text input won't handle, there is yet another method you can declare to add arbitrary HTML code to the Settings page.  settings_footer($settings)  must echo HTML code that will be rendered at the end of your Geocoder settings page.  It received the  $settings  object, which is an instance of  \\Jeo\\Settings  and have some helpers you can use.  You only need to print form fields with the right names and JEO will take care of saving them for you.  To get the right field name use  $settings->get_geocoder_option_field_name($name) .  Example:  // ...\n\n        // ...\n\n        public function settings_footer($settings) {\n\n            ?>\n            <p><strong>My Select option</strong></p>\n\n            <select name=\"<?php echo $settings->get_geocoder_option_field_name('new_option'); ?>\">\n                <option value=\"yes\" <?php selected( $this->get_option('new_option'), 'yes' ); ?> >\n                    Yes\n                </select>\n                <option value=\"no\" <?php selected( $this->get_option('new_option'), 'no' ); ?> >\n                    No\n                </select>\n            </select>\n            <?php\n\n        }\n\n// ...  Note:  selected()  is a native WordPress function. See the  official documentation",
            "title": "Advanced: Even further settings customization"
        },
        {
            "location": "/dev/layer-types/",
            "text": "Adding new Layer Types\n\n\nThis document describes how to register new Layer Types to be used in maps created with JEO.\n\n\nIntroduction\n\n\nIn JEO, maps are rendered using the \nMapbox GL\n JavaScript library. Any new layer type will have to interact with this library to add the layer to the map.\n\n\nBasically, to add a new layer type, there are 2 simple steps:\n\n\n\n\nRegister the new Layer type using a PHP hook, informing where is the main JavaScript file of your Layer Type;\n\n\nCreate a JavaScript class implementing methods to add the layer to the map and to describe what are the options a layer of this type has.\n\n\n\n\nIn short, this is all that is needed to do. In some cases, however, you might need to add extra dependencies to the project. For example, to create a Layer Type to support Carto's vector layers, we might want to add CartoVL (which is an extension to MapboxGL) to the project.\n\n\nCreating a new Layer Type\n\n\nFirst, let's register a new Layer Type by hooking up in the \njeo_register_layer_types\n action:\n\n\nadd_action('jeo_register_layer_types', function($layer_types) {\n    $layer_types->register_layer_type( 'my-layer-type', [ 'script_url' => plugin_dir_url( __FILE__ ) . '/js/layertype.js' ] );\n});\n\n\n\n\nregister_layer_type\n method gets 2 parameters.\n\n\n\n\nLayer type slug - A unique sanitized string (make sure to make it unique)\n\n\nOptions - An array with the layer type options:\n\n\nscript_url\n: Required. The absolute URL to your JavaScript file.\n\n\ndependecies\n: Optional. An array of scripts handles registered using [wp_register_script]\n(\n) that should be loaded as a dependency to the layer type main script\n\n\n\n\nThat's all you need to do on the PHP side. All the magic happens on the JavaScript.\n\n\nNow, let's create our \nlayertype.js\n file.\n\n\nIn this file, we are going to register a JavaScript object using the globally available \nwindow.JeoLayerTypes.registerLayerType\n.\n\n\nThe first parameter must be the same slug you defined when you registered your Layer Type on the PHP side, and second parameter is an object with, at least, three methods.\n\n\nwindow.JeoLayerTypes.registerLayerType('tilelayer', {\n\n    addStyle: function(map, attributes) {\n        // ...\n    },\n\n    addLayer: function(map, attributes) {\n        // ...\n    },\n\n    getSchema: function(attributes) {\n        // ...\n    }\n});\n\n\n\n\nYour Layer Type object MUST implement at least these three methods.\n\n\ngetSchema(attributes)\n\n\nparams\n:\n\n\n\n\nattributes\n - object with the layer attributes (see the section below)\n\n\n\n\nreturns\n:\n\n\n\n\nPromise with json-schema\n\n\n\n\nThis method will tell JEO which are the options the user has to fill in when creating a new layer of this type.\n\n\nFor example, a raster tile layer-type might have only a URL. A Mapbox layer has the Style ID and the optional Access token.\n\n\nThis method must return a Promise with a json-schema representation of the layer type options.\n\n\nThis schema must only include layer-type specific information. Every layer, despite its type, has a set of common attributes, such as ID and Name.\n\n\nFor example, the \"Tile layer\" layer type needs only a URL, so that's how its \ngetSchema\n method will look like.\n\n\n    // ...\n\n    getSchema: function(attributes) {\n        return new Promise( function(resolve, reject) {\n\n            resolve({\n                \"type\": \"object\",\n                \"required\": [\n                    \"url\"\n                ],\n                \"properties\": {\n                    \"url\": {\n                        \"type\": \"string\",\n                        \"title\": \"URL\"\n                    }\n                }\n            });\n\n        });\n    }\n\n\n\n\naddStyle(map, attributes)\n\n\nparams\n:\n\n\n\n\nmap\n - the initialized Mapbox \nMap\n object\n\n\nattributes\n - object with the layer attributes (See Layer attributes section below)\n\n\n\n\nreturns\n:\n\n\n\n\nThe return of a call to \nmap.setStyle\n\n\n\n\nIn MapboxGL, every map has a \nStyle\n as a base layer. This method will add the layer as the Map Style, using the \nsetStyle\n method of the \nMap\n object.\n\n\nThis method will be invoked when a layer of this type is added to the map as the base layer.\n\n\nFor example, the \"Tile Layer\" layer type sets the style as a raster layer:\n\n\n    // ...\n\n    addStyle: function(map, attributes) {\n        return map.setStyle({\n            'version': 8,\n            'sources': {\n                'raster-tiles': {\n                    'type': 'raster',\n                    'tiles': [attributes.layer_type_options.url],\n                    'tileSize': 256\n                }\n            },\n            'layers': [{\n                id: attributes.layer_id,\n                type: 'raster',\n                source: 'raster-tiles'\n            }]\n        })\n    }\n\n\n\n\nNote\n: The \nattributes.layer_type_options\n object holds all the properties declared in the \ngetSchema\n method. That's why there is a \nurl\n there! (See Layer attributes section below)\n\n\naddLayer(map, attributes)\n\n\nparams\n:\n\n\n\n\nmap\n - the initialized Mapbox \nMap\n object\n\n\nattributes\n - object with the layer attributes (See Layer attributes section below)\n\n\n\n\nreturns\n:\n\n\n\n\nThe return of a call to \nmap.addLayer\n\n\n\n\nThis method will add the layer to the map using the \naddLayer\n method of the \nMap\n object.\n\n\nThis method will be invoked when a layer of this type is added to the map.\n\n\nFor example, the \"Tile Layer\" layer type adds itself as a raster layer:\n\n\n    // ...\n\n    addLayer: function(map, attributes) {\n        var layer = {\n            id: attributes.layer_id,\n            source: {\n              type: 'raster',\n              tiles: [attributes.layer_type_options.url],\n              \"tileSize\": 256\n            },\n            type: 'raster'\n        };\n        if ( ! attributes.visible ) {\n            layer.layout = {\n                visibility: 'none'\n            };\n        }\n        return map.addLayer(layer);\n    }\n\n\n\n\n\nNote:\n This method must verify the value of \nattributes.visible\n to determine whether this layer should be visible when the map is initialized.\n\n\nLayer attributes\n\n\nAs you saw, each of the above methods gets an argument \nattributes\n as input. This argument holds all the information of the layer the user is editing or viewing.\n\n\nSome attributes are common to any layer types, and others that are specific to a layer type. Every layer type-specific attribute a layer has is stored under the \nlayer_type_options\n attributes.\n\n\nSo these are the keys available in the \nattributes\n object:\n\n\n\n\nlayer_id\n: (integer) A unique ID that represents this layer and identify it in the database\n\n\nlayer_name\n: (string) The layer name, given by the user\n\n\nvisible\n: (boolean) A flag indicating whether this layer should be visible when the map initializes\n\n\nlayer_type_options\n: (object) A object with all the layer type-specific attributes (those registered in the \ngetSchema\n method)",
            "title": "Layer types"
        },
        {
            "location": "/dev/layer-types/#adding-new-layer-types",
            "text": "This document describes how to register new Layer Types to be used in maps created with JEO.",
            "title": "Adding new Layer Types"
        },
        {
            "location": "/dev/layer-types/#introduction",
            "text": "In JEO, maps are rendered using the  Mapbox GL  JavaScript library. Any new layer type will have to interact with this library to add the layer to the map.  Basically, to add a new layer type, there are 2 simple steps:   Register the new Layer type using a PHP hook, informing where is the main JavaScript file of your Layer Type;  Create a JavaScript class implementing methods to add the layer to the map and to describe what are the options a layer of this type has.   In short, this is all that is needed to do. In some cases, however, you might need to add extra dependencies to the project. For example, to create a Layer Type to support Carto's vector layers, we might want to add CartoVL (which is an extension to MapboxGL) to the project.",
            "title": "Introduction"
        },
        {
            "location": "/dev/layer-types/#creating-a-new-layer-type",
            "text": "First, let's register a new Layer Type by hooking up in the  jeo_register_layer_types  action:  add_action('jeo_register_layer_types', function($layer_types) {\n    $layer_types->register_layer_type( 'my-layer-type', [ 'script_url' => plugin_dir_url( __FILE__ ) . '/js/layertype.js' ] );\n});  register_layer_type  method gets 2 parameters.   Layer type slug - A unique sanitized string (make sure to make it unique)  Options - An array with the layer type options:  script_url : Required. The absolute URL to your JavaScript file.  dependecies : Optional. An array of scripts handles registered using [wp_register_script] ( ) that should be loaded as a dependency to the layer type main script   That's all you need to do on the PHP side. All the magic happens on the JavaScript.  Now, let's create our  layertype.js  file.  In this file, we are going to register a JavaScript object using the globally available  window.JeoLayerTypes.registerLayerType .  The first parameter must be the same slug you defined when you registered your Layer Type on the PHP side, and second parameter is an object with, at least, three methods.  window.JeoLayerTypes.registerLayerType('tilelayer', {\n\n    addStyle: function(map, attributes) {\n        // ...\n    },\n\n    addLayer: function(map, attributes) {\n        // ...\n    },\n\n    getSchema: function(attributes) {\n        // ...\n    }\n});  Your Layer Type object MUST implement at least these three methods.",
            "title": "Creating a new Layer Type"
        },
        {
            "location": "/dev/layer-types/#getschemaattributes",
            "text": "params :   attributes  - object with the layer attributes (see the section below)   returns :   Promise with json-schema   This method will tell JEO which are the options the user has to fill in when creating a new layer of this type.  For example, a raster tile layer-type might have only a URL. A Mapbox layer has the Style ID and the optional Access token.  This method must return a Promise with a json-schema representation of the layer type options.  This schema must only include layer-type specific information. Every layer, despite its type, has a set of common attributes, such as ID and Name.  For example, the \"Tile layer\" layer type needs only a URL, so that's how its  getSchema  method will look like.      // ...\n\n    getSchema: function(attributes) {\n        return new Promise( function(resolve, reject) {\n\n            resolve({\n                \"type\": \"object\",\n                \"required\": [\n                    \"url\"\n                ],\n                \"properties\": {\n                    \"url\": {\n                        \"type\": \"string\",\n                        \"title\": \"URL\"\n                    }\n                }\n            });\n\n        });\n    }",
            "title": "getSchema(attributes)"
        },
        {
            "location": "/dev/layer-types/#addstylemap-attributes",
            "text": "params :   map  - the initialized Mapbox  Map  object  attributes  - object with the layer attributes (See Layer attributes section below)   returns :   The return of a call to  map.setStyle   In MapboxGL, every map has a  Style  as a base layer. This method will add the layer as the Map Style, using the  setStyle  method of the  Map  object.  This method will be invoked when a layer of this type is added to the map as the base layer.  For example, the \"Tile Layer\" layer type sets the style as a raster layer:      // ...\n\n    addStyle: function(map, attributes) {\n        return map.setStyle({\n            'version': 8,\n            'sources': {\n                'raster-tiles': {\n                    'type': 'raster',\n                    'tiles': [attributes.layer_type_options.url],\n                    'tileSize': 256\n                }\n            },\n            'layers': [{\n                id: attributes.layer_id,\n                type: 'raster',\n                source: 'raster-tiles'\n            }]\n        })\n    }  Note : The  attributes.layer_type_options  object holds all the properties declared in the  getSchema  method. That's why there is a  url  there! (See Layer attributes section below)",
            "title": "addStyle(map, attributes)"
        },
        {
            "location": "/dev/layer-types/#addlayermap-attributes",
            "text": "params :   map  - the initialized Mapbox  Map  object  attributes  - object with the layer attributes (See Layer attributes section below)   returns :   The return of a call to  map.addLayer   This method will add the layer to the map using the  addLayer  method of the  Map  object.  This method will be invoked when a layer of this type is added to the map.  For example, the \"Tile Layer\" layer type adds itself as a raster layer:      // ...\n\n    addLayer: function(map, attributes) {\n        var layer = {\n            id: attributes.layer_id,\n            source: {\n              type: 'raster',\n              tiles: [attributes.layer_type_options.url],\n              \"tileSize\": 256\n            },\n            type: 'raster'\n        };\n        if ( ! attributes.visible ) {\n            layer.layout = {\n                visibility: 'none'\n            };\n        }\n        return map.addLayer(layer);\n    }  Note:  This method must verify the value of  attributes.visible  to determine whether this layer should be visible when the map is initialized.",
            "title": "addLayer(map, attributes)"
        },
        {
            "location": "/dev/layer-types/#layer-attributes",
            "text": "As you saw, each of the above methods gets an argument  attributes  as input. This argument holds all the information of the layer the user is editing or viewing.  Some attributes are common to any layer types, and others that are specific to a layer type. Every layer type-specific attribute a layer has is stored under the  layer_type_options  attributes.  So these are the keys available in the  attributes  object:   layer_id : (integer) A unique ID that represents this layer and identify it in the database  layer_name : (string) The layer name, given by the user  visible : (boolean) A flag indicating whether this layer should be visible when the map initializes  layer_type_options : (object) A object with all the layer type-specific attributes (those registered in the  getSchema  method)",
            "title": "Layer attributes"
        },
        {
            "location": "/dev/migration/",
            "text": "Migration\n\n\nNotes on changes in DB structure from old JEO that will need to have migrations written.\n\n\nGeocode \npost_meta\n\n\nOn old JEO, some \nmeta_key\ns are prefixed by an underscore (\n_\n) and others aren't:\n\n\n\n\ngeocode_address\n\n\ngeocode_latitude\n\n\ngeocode_longitude\n\n\n_geocode_city\n\n\n_geocode_country\n\n\ngeocode_viewport\n\n\n\n\nLet's have them all with a underscore at the beginning.",
            "title": "Migration"
        },
        {
            "location": "/dev/migration/#migration",
            "text": "Notes on changes in DB structure from old JEO that will need to have migrations written.",
            "title": "Migration"
        },
        {
            "location": "/dev/migration/#geocode-post_meta",
            "text": "On old JEO, some  meta_key s are prefixed by an underscore ( _ ) and others aren't:   geocode_address  geocode_latitude  geocode_longitude  _geocode_city  _geocode_country  geocode_viewport   Let's have them all with a underscore at the beginning.",
            "title": "Geocode post_meta"
        }
    ]
}